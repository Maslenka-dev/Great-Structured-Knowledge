	Кроме обычных полей, методов, свойств, классы и структуры могут иметь статические поля, методы и свойства. Статические поля, методы и свойства относятся ко всему классу/всей структуре и для обращения к подобным членам необязательно создавать экземпляр класса / структуры. Это озночает, что данное поле, метод или свойство будет принадлежать не к каждому объекту класса, а всем им вместе.

	Если член класса объявляется как static, то он становится доступным до создания любых объектов своего класса и без ссылки на какой-нибудь объект. С помощью ключевого слова static можно объявлять как переменные, так и методы. Наиболее характерным примером члена типа static служит метод Main(), который объявляется таковым потому, что он должен вызываться операционной системой в самом начале выполняемой программы.

	Для того чтобы воспользоваться членом типа static за пределами класса, достаточно указать имя этого класса с оператором-точкой. Но создавать объект для этого не нужно. В действительности член типа static оказывается доступным не по ссылке на объект, а по имени своего класса.

	Переменные, объявляемые как static, по существу, являются глобальными. Когда же объекты объявляются в своем классе, то копия переменной типа static не создается. Вместо этого все экземпляры класса совместно пользуются одной и той же переменной типа static. Такая переменная инициализируется перед ее применением в классе. 

Статические поля
	
	Статические поля хранят состояние всего класса / структуры. Статическое поле определяется как и обычное, только перед типом поля указывается ключевое слово static. Например, рассмотрим класс Person, который представляет человека:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Console.WriteLine(Person.retirementAge);

		        Person pers1 = new Person(78);
		        pers1.CheckAge();
		        Person pers2 = new Person(56);
		        pers2.CheckAge();
		    }
		}
		class Person
		{
		    private int age;
		    public static int retirementAge = 65;
		    public Person(int age) => this.age = age; 
		    public void CheckAge()
		    {
		        if (age >= retirementAge)
		        {
		            Console.WriteLine("ОЙ, ДА ВЫ УЖЕ ПЕНСИОНЕР!");
		        }
		        else
		        {
		            Console.WriteLine($"Сколько осталось лет до пенсии: {retirementAge - age}");
		        }
		    }
		}

	В данном случае класс Person имеет два поля: age (хранит возраст человека) и retirementAge (хранит пенсионный возраст). Однако поле retirementAge является статическим. Оно относится не к конкретному человеку, а ко всем людям. Таким образом, поле retirementAge относится не к отдельную объекту и хранит значение НЕ отдельного объекта класса Person, а относится ко всему классу Person и хранит общее значение для всего класса.

	Причем в самом классе мы можем использовать это поле как и любые другие. Так, в методе СheckAge(), который поверяет пенсионный статус человека, для проверки используем это поле:

		if (age > retirementAge)

	Но если мы хотим обратиться к этому полю вне своего класса, то мы можем обращаться к этому полю по имени класса:

		Console.WriteLine(Person.retirementAge);

	На уровне памяти для статических полей будет создаваться участок в памяти, который будет общим для всех объектов класса.

	При этом память для статических переменных выделяется даже в том случае, если не создано ни одного объекта этого класса.

Статические свойства

	Подобным образом мы можем создавать и использовать статические 
	свойства:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Console.WriteLine(Person.RetirementAge);
		        Person bob = new(68);
		        bob.СheckAge();
		    }
		}
		class Person
		{
		    private int age;
		    private static int retirementAge = 65;
		    public static int RetirementAge
		    {
		        get { return retirementAge; }
		        set { if (value > 1 && value < 100) retirementAge = value; }
		    }
		    public Person(int age)
		    {
		        this.age = age;
		    }
		    public void СheckAge()
		    {
		        if (age >= retirementAge)
		            Console.WriteLine("ОЙ, ДА ВЫ УЖЕ ПЕНСИОНЕР!");
		        else
		            Console.WriteLine($"Сколько лет осталось до пенсии: {retirementAge - age}");
		    }
		}

	В данном случае доступ к статической переменной retirementAge опосредуется с помощью статического свойства RetirementAge.

	Таким образом, переменные и свойства, которые хранят состояние, общее для всех объектов класса / структуры, следует определять как статические.

	Нередко статические поля и свойства применяются для хранения счетчиков. Например, мы хотим иметь счетчик, который позволял бы узнать, сколько объектов Person создано:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Person pers1 = new Person();
		        Person pers2 = new Person();
		        Person pers3 = new Person();
		        Console.WriteLine(Person.Counter);  
		    }
		}
		class Person
		{
		    private static int counter = 0;
		    public static int Counter => counter;
		    public Person()
		    {
		        counter++;
		    }
		}

	В данном случае в классе Person счетчик хранится в приватной переменной counter, значение которой увеличивается на единицу при создании объекта в конструкторе. А с помощью статического свойства Counter, которое доступно только для чтения, мы можем получить значение счетчика.

Статические методы

	Статические методы определяют общее для всех объектов поведение, которое не зависит от конкретного объекта. Для обращения к статическим методам также применяется имя класса / структуры:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Person pers1 = new Person(25);
		        Person pers2 = new Person(99);
		        Person.CheckRetirementStatus(pers1);
		        Person.CheckRetirementStatus(pers2);
		    }
		}
		class Person
		{
		    public int Age { get; set; }
		    private static int retirementAge = 65;
		    public Person(int age) => Age = age;
		    public static void CheckRetirementStatus(Person person)
		    {
		        if (person.Age >= retirementAge)
		            Console.WriteLine("Уже на пенсии");
		        else
		            Console.WriteLine($"Сколько лет осталось до пенсии: {retirementAge - person.Age}");
		    }
		}

	В данном случае в классе Person определен статический метод CheckRetirementStatus(), который в качестве параметра принимает объект Person и проверяет его пенсионный статус.

	Следует учитывать, что статические методы могут обращаться только к статическим членам класса. Обращаться к нестатическим методам, полям, свойствам внутри статического метода мы не можем.

Статический конструктор

	Кроме обычных конструкторов у класса также могут быть статические конструкторы. Статические конструкторы имеют следующие отличительные черты:

		- Статические конструкторы не должны иметь модификатор доступа и не принимают параметров.

		- Как и в статических методах, в статических конструкторах нельзя использовать ключевое слово this для ссылки на текущий объект класса и можно обращаться только к статическим членам класса.

		- Статические конструкторы нельзя вызвать в программе вручную. Они выполняются автоматически при самом первом создании объекта данного класса или при первом обращении к его статическим членам (если таковые имеются). 

	Статические конструкторы обычно используются для инициализации статических данных, либо же выполняют действия, которые требуется выполнить только один раз.

	Определим статический конструктор:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Console.WriteLine(Person.RetirementAge);
		    }
		}
		class Person
		{
		    static int retirementAge;
		    public static int RetirementAge => retirementAge;
		    static Person()
		    {
		        if (DateTime.Now.Year == 2029)
		            retirementAge = 65;
		        else
		            retirementAge = 67;
		    }
		}

	В данном случае с помощью встроенной структуры DateTime получаем текущий год. Для этого используется свойство DateTime.Now.Year. если он равен 2022, устанавливаем один пенсионный возраст. При другом значении текущего года устанавливается другое значение пенсионного возраста.

Статические классы

	Статические классы объявляются с модификатором static и могут содержать только статические поля, свойства и методы. Например, определим класс, который выполняет ряд арифметических операций:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Console.WriteLine(Operations.Add(5, 4));          
		        Console.WriteLine(Operations.Subtract(5, 4));     
		        Console.WriteLine(Operations.Multiply(5, 4));
		    }
		}
		static class Operations
		{
		    public static int Add(int x, int y) => x + y;
		    public static int Subtract(int x, int y) => x - y;
		    public static int Multiply(int x, int y) => x * y;
		}