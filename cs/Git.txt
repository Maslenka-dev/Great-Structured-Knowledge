Fork (ответвление) - это клон репозитория со всей историей и состоянием на момент его создания. При этом сохраняется связь с оригинальным репозиторием и можно по желанию синхронизировать данные в свой форк оттуда или же делать pull requests в оригинальный репозиторий.

	С какой целью вы делаете себе форк - дело десятое. Если код в оригинальном репозитории позволяет модификацию (open-source), можете с ним делать что хотите - затачивать под себя, разрабатывать фичу которую потом отправите в оригинальный проект и тд. Если делаете модификации чисто для себя - с авторами оригинального проекта ничего согласовывать не нужно. Если хотите фичу им предложить - тогда сначала заведите issue в оригинальном репозитории, обсудите если надо и потом делайте форк и предлагайте pull request. 

Pull request (запрос на извлечение) - механизм, который позволяет разработчикам предложить свои изменения в коде проекта. И сделать это так, чтобы эти изменения прошли через определенный процесс рассмотрения, прежде чем они будут интегрированы в основной код.

git --version - текущая версия Git.

git update-git-for-windows - обновление Git.

git remote add origin <ссылка на удаленный репозиторий> - привязать ваш уже существующий репозиторий к удаленному   

git commit -m "Название твоего комита": Команда git commit берёт все данные, добавленные в индекс с помощью git add, и сохраняет их слепок во внутренней базе данных, а затем сдвигает указатель текущей ветки на этот слепок.тоесть ты добавляешь файлы git add.

git commit -a -m "Название" - создание коммита, автоматически добавляя все изменения в отслеживаемых файлах, пропуская стадию отдельного добавления (git add), и сразу фиксируя их в репозитории.

git commit --amend -m "Новое название" - изменение названия последнего коммита.

git push --set-upstream origin master - используется для отправки закоммиченных файлов в удаленный репозиторий (также известный как GitHub) в указанной ветке. Используйте эту команду, когда вы впервые отправляете файлы в удаленный репозиторий. Он зафиксирует место, куда вы отправляете эти файлы. И в следующий раз можно будет использовать команду git push. 

git push: Отправить ("запушить") все закоммиченные изменения. Используется для установления связи с удалённым репозиторием, вычисления локальных изменений отсутствующих в нём, и собственно их передачи в вышеупомянутый репозиторий. 

git push origin master: Отправить ветку master на удаленный репозиторий

git pull - команда для обновления содержимого локального git-репозитория (получить последнее обновление).
	
	git pull origin main:

		- Подключается к удалённому репозиторию с именем origin (обычно это основной удалённый репозиторий).

		- Загружает последние изменения из ветки main этого удалённого репозитория.

		- Затем сливает эти изменения с вашей текущей локальной веткой, в которой вы находитесь в момент выполнения команды.

origin - название по умолчанию для удалённого репозитория, с которым работает локальный репозиторий после его клонирования.

git checkout:	позволяет перемещаться между ветками, созданными командой git branch. 

git branch:		Отображение списка веток в репозитории. Это синоним команды git branch --list

git branch <branch>:	Создание новой ветки с именем ＜ветка＞. Эта команда не выполняет переключение на эту новую ветку.

git branch -m <branch>:		Изменение имени текущей ветки на ＜ветка＞.

git branch -d <branch> - Удаление указанной ветки. Это «безопасная» операция, поскольку Git не позволит удалить ветку, если в ней есть неслитые изменения.

git branch -rd <branch> - удаление указанной ветки на удаленном сервере.

git branch -D <branch> - Принудительное удаление указанной ветки, даже если в ней есть неслитые изменения. Эта команда используется, если вы хотите навсегда удалить все коммиты, связанные с определенным направлением разработки.

git branch -a:	  Вывод списка всех удаленных веток. 

git checkout main
git merge "somebranch":	 переключается на ветку main, объединяет ветку main и somebranch 

git merge "somebranch" --allow-unrelated-histories: 	при ошибке «refusing to merge unrelated histories»

git merge <название ветки>, где <название ветки> — название ветки, которая будет объединена с принимающей.

git reset <file> - Отмена Git Add. git reset <file> - откат изменений в одном файле. git reset - откат изменений всего проекта.

git clone - команда, необходимая для создания локальных копий удаленных репозиториев. git clone <URL_репозитория> - клонирование репозитория. git clone <URL_репозитория> <имя_папки> - клонирование репозитория в определенную папку.

git rebase --abort - используется для отмены текущего процесса перебазирования (rebase) в Git. Она позволяет вернуть репозиторий в состояние, в котором он находился до начала операции rebase. 

clear:	Очистить консоль

Для переименовывания файла, необходимо сначала его переименовать в локальном репозитории, затем запушить измененный файл на удаленный репозиторий. После необходимо удаленный файл, который мы переименовали, также запушить в удаленный репозиторий. В итоге, у нас и в локальном и удаленном репозитории будет по одному переименованному файлу.

rm -rf .git - убрать .git из каталога linux.