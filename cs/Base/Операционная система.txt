Операционная система (ОС) - программное обеспечение, совокупность программ, управляющих ресурсами компьютера и обеспечивающих интерфейс для взаимодействия пользователей с компьютером. Она служит посредником между аппаратным обеспечением и прикладным программным обеспечением, предоставляя программистам удобный интерфейс для создания программ, которые находятся выше уровнем. Если бы её не было, то программистам пришлось бы для каждой новой программы реализовывать свои методы для работы с аппаратными компонентами, что очень денежно и время затратно и это неописуемо увеличивает порог вхождения в разработку.

Основные задачи и функции:

	- Загрузка программ в оперативную память и их выполнение.
	- Управление аппаратными компонентами, такие как: процессор, память, устройства ввода-вывода.
	- Предоставление интерфейса для работы с файловой системы, проще говоря, файлами, папками, с которыми мы привыкли работать.
	- Операционная система контролирует доступ к ресурсам и данным, предотвращая несанкционированный доступ программ к защищенным данным или данным других программ, то есть обеспечение безопасности.


	Операционная система представляет собой интерфейс («прослойку») между пользователем ресурсов компьютера и самими ресурсами

	В целом, общей схемой это можно отобразить так:

	https://my-study-st.readthedocs.io/_images/OS_monolit-OS_1.png

	Интерфейс — набор правил и средств взаимодействия двух систем. Иными словами способ взаимодействия.

	Kernel space — адресное пространство ядра ОС, в котором процессы имеют привилегированный доступ к ресурсам компьютера и другим процессам.

	User space — адресное пространство, отведённое для пользовательских процессов (приложений), то есть не имеющих привилегированный доступ к ресурсам.

Многозадачность ОС

	Разделение времени: ОС выделяет маленькие отрезки времени каждой программе, позволяя им поочередно выполняться. Этот отрезок времени называется квант времени.

	Планировщик задач: это как умный повар на кухне, который решает, когда переключать внимание между разными задачами. Планировщик определяет, какие задачи важнее, и управляет, сколько времени каждая из них получает для выполнения.

	Интервальное переключение: когда ваш компьютер многозадачит, он быстро переключается между задачами, создавая иллюзию одновременного выполнения или если ваш процессор многоядерный, то они действительно могут выполняться параллельно. Например, если вы пишете текст в редакторе, планировщик может быстро переключиться на музыкальный плеер, чтобы он продолжил воспроизведение, а затем вернуться к редактору.

	Процесс (Process) — это программа во время выполнения. Он включает в себя инструкции, данные и ресурсы, необходимые для выполнения программы. Одна программа может создавать много копий процессов, при её многократном запуске, всё они не будут зависеть друг от друга. Например, вы открыли два блокнота, это всё одна программа, но разные процессы и у каждого своё состояние.

	У каждого процесса в ОС существует собственная оболочка, своё адресное пространство, оно изолирует процесс от других процессов.

	Поток (Thread) – наименьшая единица выполнения внутри процесса. Он представляет собой отдельную сущность, у которой есть свои собственные данные. Все потоки работают в одном общем адресном пространстве процесса. И по этой причине появляется проблема синхронизации данных между потоками, но это уже совсем другая история. Один процесс содержит минимум один поток. Потоки в процессе выполняются параллельно. Во время создания процесса, происходит создание главного потока (main thread), он является прародителем всех остальных потоков, которые будут созданы им с помощью системных вызовов (в дальнейшем тоже рассмотрим, что это). У каждого потока есть его собственный контекст выполнения. 

	Потоки, существующие в рамках одного процесса, в его адресном пространстве, могут совместно использовать ресурсы процесса, например такие как память или файл. Тогда как процессы не разделяют этих ресурсов, так как каждый существует в своём адресном пространстве.

	Планировщик задач (job scheduler) - компонент ответственный за управление исполнением потоков и распределение ресурсов между ними. Его основной задачей является переключение потоков и эффективное управление временем процессора.

Системные вызовы
	
	Когда программа работает в пользовательском режиме, у нее ограниченный доступ к системным ресурсам. Однако, иногда приложениям необходимо выполнять действия, требующие более высоких привилегий, таких как открытие файла, управление памятью или создание процессов или потоков.

	В этом случае программе нужен способ запросить операционную систему о выполнении привилегированных действий. Здесь на помощь приходят системные вызовы.

	Механизм системных вызовов — это интерфейс, который предоставляет ядро ОС (kernel space) пользовательским процессам (user space).

	Системный вызов (System call) - обращение пользовательского процесса к ядру операционной системы для выполнения какой-либо операции. Ядро операционной системы предоставляет набор функций, которые программы могут вызывать для выполнения определенных операций, таких как ввод-вывод, создание процессов, управление файлами и т. д.

	Этот механизм обеспечивает безопасный и контролируемый способ для программ взаимодействовать с привилегированными функциями ОС, минимизируя риски безопасности.

Драйвера

	ОС должка выполнять одни и те же операции над разными типами устройств. И чтобы она выполняла их однообразно — нужно чтобы был общий интерфейс. Реализацией этого общего интерфейса занимаются специальные программы - драйверы устройств. То есть, ОС обращается к драйверам устройств используя однотипные команды «отправить команду/считать/записать», а драйвера уже превращает эти команды в то, что понимает конкретное устройство.

	Драйвер – это такая программа, которая обеспечивают связь между операционной системой и аппаратным обеспечением компьютера. Он реализуют удобный интерфейс для правильного использования устройства, служит посредником между операционной системой и конкретными устройствами, такими как принтеры, клавиатура, мышь, видеокарты, звуковые карты, и другие периферийные устройства. 

	В ранних операционных системах, драйверы отсутствовали или были встроены в само ядро операционной системы. Эти системы были простыми, и их возможности взаимодействия с аппаратным обеспечением были ограниченными.

Организация пользовательских данных

	ОС предоставляет пользователю средства для хранения и организации информации. Основной метод организации данных - использование файлов и файловых систем.

	Файл — это набор данных, объединенных под общим именем, которое пользователь или программа может использовать для доступа к этим данным. Файл может содержать текстовую информацию, изображения, звуки, программный код и другие типы данных. Файлы обычно именуются, чтобы их легче было идентифицировать.

Из чего он состоит?

	Имя файла (File Name): имя файла — это уникальная метка, по которой файл идентифицируется в файловой системе (дальше рассмотрим, что это). Оно служит для обозначения файла и его различения от других файлов. Имя файла может содержать буквы, цифры и определенные специальные символы в зависимости от правил файловой системы.

	Расширение файла (File Extension): расширение файла добавляется к имени файла и представляет тип содержимого файла. Это помогает операционной системе и программам определить, как следует обработать файл. Например, в файле "image.jpg" расширение - "jpg", указывающее, что это файл с изображением в формате JPEG. Расширение файла не гарантирует то, что этот файл именно такого типа, мы можем взять файл audio.mp4 и вручную поменять его расширение в audio.txt.

	Размер файла (File Size): размер файла указывает на объем занимаемого им пространства на носителе данных. 

	Права доступа (File Permissions): права доступа определяют, какие операции пользователи и группы пользователей могут выполнять с файлом. Обычно это права на чтение, запись и выполнение файла.

	Время создания, изменения и доступа (File Timestamps): эти временные метки отражают моменты в истории файла. Время создания указывает, когда файл был создан, время изменения - когда последний раз менялось содержимое файла, и время доступа - когда файл был последний раз открывался.

	Содержимое файла: фактическое содержимое файла, будь то текст, изображения, исполняемый код или что-то еще.

Файловая система

	Файловая система (File System) — это механизм, обеспечивающий организацию и хранение файлов на носителях данных, таких как жесткие диски, SSD-накопители, флеш-диски и др. Она управляет созданием, удалением, чтением и записью файлов, а также предоставляет структуру для организации файлов.

	Вот некоторые основные концепции и компоненты файловых систем.

	Каталоги (папки): каталоги используются для организации файлов в иерархическую структуру. Они позволяют группировать файлы по определенным критериям, делая управление файлами более структурированным и понятным для нашего восприятия. Каталог тоже может являться файлом, который будет содержать внутри себя другие файлы.

	Путевые имена: каждый файл в файловой системе имеет уникальный путь, который указывает на его местоположение в иерархии каталогов. Путь состоит из имен каталогов, разделенных специальным символом.

	Разделы и тома: файловая система обычно организуется на уровне разделов или томов. Разделы и тома — это области физического устройства, выделенные для хранения файловой системы.

	Форматирование: процесс создания файловой системы на устройстве называется форматированием. В этот момент определяются правила хранения информации, структура каталогов и т. д.

	Файловые операции: файловая система предоставляет интерфейс для различных операций с файлами, таких как чтение, запись, удаление, переименование и т. д.



