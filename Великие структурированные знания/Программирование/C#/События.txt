	События сигнализируют системе о том, что произошло определенное действие. И если нам надо отследить эти действия, то как раз мы можем применять события.

	Например, возьмем следующий класс, который описывает банковский счет:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Account acc = new Account(100);
		        acc.Put(50);
		        Console.WriteLine($"Сумма на счете: {acc.Sum}");
		        acc.Take(140);
		        Console.WriteLine($"Сумма на счете: {acc.Sum}");
		        acc.Take(200);
		        Console.WriteLine($"Сумма на счете: {acc.Sum}");
		    }
		}
		class Account
		{ 
		    public int Sum { get; set; }
		    public Account(int sum) => Sum = sum;
		    public void Put(int sum) => Sum += sum;
		    public void Take(int sum)
		    {
		        if (Sum >= sum)
		            Sum -= sum;
		    }
		}

	Все операции работают как и положено. Но что если мы хотим уведомлять пользователя о результатах его операций. Мы могли бы, например, для этого изменить метод Put следующим образом:

		public void Put(int sum)    
		{
		    Sum += sum;
		    Console.WriteLine($"На счет поступило: {sum}");
		}

	Казалось, теперь мы будем извещены об операции, увидев соответствующее сообщение на консоли. Но тут есть ряд замечаний. На момент определения класса мы можем точно не знать, какое действие мы хотим произвести в методе Put в ответ на добавление денег. Это может вывод на консоль, а может быть мы захотим уведомить пользователя по email или sms. Более того мы можем создать отдельную библиотеку классов, которая будет содержать этот класс, и добавлять ее в другие проекты. И уже из этих проектов решать, какое действие должно выполняться. Возможно, мы захотим использовать класс Account в графическом приложении и выводить при добавлении на счет в графическом сообщении, а не консоль. Или нашу библиотеку классов будет использовать другой разработчик, у которого свое мнение, что именно делать при добавлении на счет. И все эти вопросы мы можем решить, используя события.

Определение и вызов событий

	События объявляются в классе с помощью ключевого слова event, после которого указывается тип делегата, который представляет событие:

		delegate void AccountHandler(string message);
		event AccountHandler Notify;

	В данном случае вначале определяется делегат AccountHandler, который принимает один параметр типа string. Затем с помощью ключевого слова event определяется событие с именем Notify, которое представляет делегат AccountHandler. Название для события может быть произвольным, но в любом случае оно должно представлять некоторый делегат.

	Определив событие, мы можем его вызвать в программе как метод, используя имя события:

		Notify("Произошло действие");

	Поскольку событие Notify представляет делегат AccountHandler, который принимает один параметр типа string - строку, то при вызове события нам надо передать в него строку.

	Однако при вызове событий мы можем столкнуться с тем, что событие равно null в случае, если для его не определен обработчик. Поэтому при вызове события лучше его всегда проверять на null:

		Notify?.Invoke("Произошло действие");

	В этом случае поскольку событие представляет делегат, то мы можем его вызвать с помощью метода Invoke(), передав в него необходимые значения для параметров.

	Объединим все вместе, создадим и вызовем событие:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Account acc = new Account(100);
		        acc.Notify += DisplayMessage;
		        acc.Put(50);
		        acc.Take(140);
		        acc.Take(200);
		        Console.WriteLine(acc.Sum);
		        void DisplayMessage(string message) => Console.WriteLine(message);
		    }
		}
		class Account
		{
		    public delegate void AccountHandler(string message);
		    public event AccountHandler? Notify;
		    public int Sum { get; set; }
		    public Account(int sum) => Sum = sum;
		    public void Put(int sum)
		    {
		        Sum += sum;
		        Notify?.Invoke($"На счет поступили средства в размере {sum}");
		    }
		    public void Take(int sum)
		    {
		        if (Sum >= sum)
		        {
		            Sum -= sum;
		            Notify?.Invoke($"Со счета было списано: {sum}");
		        }
		        else
		            Notify?.Invoke("На счету недостаточно средств");
		    }
		}

	Теперь с помощью события Notify мы уведомляем систему о том, что были добавлены средства и о том, что средства сняты со счета или на счете недостаточно средств.

Добавление обработчика события
	
	С событием может быть связан один или несколько обработчиков. Обработчики событий - это именно то, что выполняется при вызове событий. Нередко в качестве обработчиков событий применяются методы. Каждый обработчик событий по списку параметров и возвращаемому типу должен соответствовать делегату, который представляет событие. Для добавления обработчика события применяется операция +=:

		Notify += обработчик события;

	Определим обработчики для события Notify, чтобы получить в программе нужные уведомления:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Account acc = new Account(100);
		        acc.Notify += DisplayMessage;
		        acc.Put(50);
		        acc.Take(140);
		        acc.Take(200);
		        Console.WriteLine(acc.Sum);
		        void DisplayMessage(string message) => Console.WriteLine(message);
		    }
		}
		class Account
		{
		    public delegate void AccountHandler(string message);
		    public event AccountHandler? Notify;
		    public int Sum { get; set; }
		    public Account(int sum) => Sum = sum;
		    public void Put(int sum)
		    {
		        Sum += sum;
		        Notify?.Invoke($"На счет поступили средства в размере {sum}");
		    }
		    public void Take(int sum)
		    {
		        if (Sum >= sum)
		        {
		            Sum -= sum;
		            Notify?.Invoke($"Со счета было списано: {sum}");
		        }
		        else
		            Notify?.Invoke("На счету недостаточно средств");
		    }
		}

	В данном случае в качестве обработчика используется метод DisplayMessage, который соответствует по списку параметров и возвращаемому типу делегату AccountHandler. В итоге при вызове события Notify?.Invoke() будет вызываться метод DisplayMessage, которому для параметра message будет передаваться строка, которая передается в Notify?.Invoke(). В DisplayMessage просто выводим полученное от события сообщение, но можно было бы определить любую логику.

	Если бы в данном случае обработчик не был бы установлен, то при вызове события Notify?.Invoke() ничего не происходило, так как событие Notify было бы равно null.

Добавление и удаление обработчиков
	
	Для одного события можно установить несколько обработчиков и потом в любой момент времени их удалить. Для удаления обработчиков применяется операция -=. Например:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Account acc = new Account(100);
		        acc.Notify += DisplayMessage;
		        acc.Notify += DisplayRedMessage;
		        acc.Put(50);
		        acc.Take(140);
		        acc.Take(200);
		        acc.Notify -= DisplayRedMessage;
		        Console.WriteLine($"Сумма на счете: {acc.Sum}");
		        void DisplayMessage(string message) => Console.WriteLine(message);
		        void DisplayRedMessage(string message)
		        {
		            Console.ForegroundColor = ConsoleColor.Red;
		            Console.WriteLine(message);
		            Console.ResetColor();
		        }
		    }
		}
		class Account
		{
		    public delegate void AccountHandler(string message);
		    public event AccountHandler? Notify;
		    public int Sum { get; set; }
		    public Account(int sum) => Sum = sum;
		    public void Put(int sum)
		    {
		        Sum += sum;
		        Notify?.Invoke($"На счет поступили средства в размере {sum}");
		    }
		    public void Take(int sum)
		    {
		        if (Sum >= sum)
		        {
		            Sum -= sum;
		            Notify?.Invoke($"Со счета было списано: {sum}");
		        }
		        else
		            Notify?.Invoke("На счету недостаточно средств");
		    }
		}

	В качестве обработчиков могут использоваться не только обычные методы, но также делегаты, анонимные методы и лямбда-выражения: 

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Account acc = new Account(100);
		        acc.Notify += delegate (string message) { Console.WriteLine(message); }; // Анонимный метод
		        acc.Notify += message => // лямбда-выражение
		        {
		            Console.ForegroundColor = ConsoleColor.Green;
		            Console.WriteLine(message);
		            Console.ResetColor();
		        };
		        acc.Put(50);
		        acc.Take(140);
		        acc.Take(200);
		        Console.WriteLine($"Сумма на счете: {acc.Sum}");
		    }
		}
		class Account
		{
		    public delegate void AccountHandler(string message);
		    public event AccountHandler? Notify;
		    public int Sum { get; set; }
		    public Account(int sum) => Sum = sum;
		    public void Put(int sum)
		    {
		        Sum += sum;
		        Notify?.Invoke($"На счет поступили средства в размере {sum}");
		    }
		    public void Take(int sum)
		    {
		        if (Sum >= sum)
		        {
		            Sum -= sum;
		            Notify?.Invoke($"Со счета было списано: {sum}");
		        }
		        else
		            Notify?.Invoke("На счету недостаточно средств");
		    }
		}

	В данном случае разницы между двумя обработчиками никакой не будет.

Управление обработчиками

	С помощью специальных акссесоров add/remove мы можем управлять добавлением и удалением обработчиков. Как правило, подобная функциональность редко требуется, но тем не менее мы ее можем использовать. Например:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Account acc = new Account(100);
		        acc.Notify += DisplayMessage;
		        acc.Notify += DisplayRedMessage;
		        acc.Put(50);
		        acc.Take(140);
		        acc.Take(200);
		        acc.Notify -= DisplayRedMessage;
		        Console.WriteLine($"Сумма на счете: {acc.Sum}");
		        void DisplayMessage(string message) => Console.WriteLine(message);
		        void DisplayRedMessage(string message)
		        {
		            Console.ForegroundColor = ConsoleColor.Red;
		            Console.WriteLine(message);
		            Console.ResetColor();
		        }
		    }
		}
		class Account
		{
		    public delegate void AccountHandler(string message);
		    AccountHandler? notify;
		    public event AccountHandler? Notify
		    {
		        add
		        {
		            notify += value;
		            Console.WriteLine($"{value?.Method.Name} добавлен");
		        }
		        remove
		        {
		            notify -= value;
		            Console.WriteLine($"{value?.Method.Name} удален");
		        }
		    }
		    public int Sum { get; set; }
		    public Account(int sum) => Sum = sum;
		    public void Put(int sum)
		    {
		        Sum += sum;
		        notify?.Invoke($"На счет поступили средства в размере {sum}");
		    }
		    public void Take(int sum)
		    {
		        if (Sum >= sum)
		        {
		            Sum -= sum;
		            notify?.Invoke($"Со счета было списано: {sum}");
		        }
		        else
		            notify?.Invoke("На счету недостаточно средств");
		    }
		}

	Теперь опредление события разбивается на две части. Вначале просто определяется переменная делегата, через которую мы можем вызывать связанные обработчики:

		AccountHandler notify;

	Во второй части определяем акссесоры add и remove. Аксессор add вызывается при добавлении обработчика, то есть при операции +=. Добавляемый обработчик доступен через ключевое слово value. Здесь мы можем получить информацию об обработчике (например, имя метода через value.Method.Name) и определить некоторую логику. В данном случае для простоты просто выводится сообщение на консоль:

		add
        {
            notify += value;
            Console.WriteLine($"{value?.Method.Name} добавлен");
        }

    Блок remove вызывается при удалении обработчика. Аналогично здесь можно задать некоторую дополнительную логику:

   		remove
        {
            notify -= value;
            Console.WriteLine($"{value?.Method.Name} удален");
        }

    Внутри класса событие вызывается также через переменную notify. Но для добавления и удаления обработчиков в программе используется как раз Notify.




