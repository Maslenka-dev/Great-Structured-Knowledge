	С помощью универсальных параметров мы можем типизировать обобщенные классы любым типом. Однако иногда возникает необходимость конкретизировать тип. Например, у нас есть следующий класс Message, который представляет некоторое сообщение:

		public class Message
        {
            public string Text { get; set; }
            public Message(string Text)
            {
                this.Text = Text;
            }
        }

    И, допустим, мы хотим определить метод для отправки сообщений в виде объектов Message. На первый взгляд мы можем определить и использовать следующий метод:

    	void SendMessage(Message message)
        {
	        Console.WriteLine($"Отправлено сообщение: {message.Text}");
        }            
        SendMessage(new Message("Я енотик полоскун!!"));	

    Метод SendMessage в качестве параметра message принимает объект Message и эмулирует его отправку. Вроде все нормально и что-то лучше вряд ли можно придумать. Но у класса Message могут быть классы-наследники. Например, класс EmailMessage для email-сообщений, SmsMessage - для sms-сообщений и так далее

    	public class EmailMessage : Message
        {
            public EmailMessage(string Text) : base(Text) { }
        }
        public class SMSMessage : Message
        {
            public SMSMessage(string Text) : base(Text) { }
        }

    Что если мы хотим также отправлять сообщения, которые представляют эти классы? Проблемы вроде нет, поскольку метод SendMessage принимает объект Message и соответственно также и объекты производных классов:

    	SendMessage(new EmailMessage("У меня дома посется коза с бородой"));
		SendMessage(new SMSMessage("Я ем кашу вилкой"));

	Но здесь мы сталкиваемся с преобразованием типов: от EmailMessage к Message. Кроме того, опять же возможна проблема типобезопасности, если мы захотим преобразовать объект message в объект производных классов. И в этом случае чтобы избежать преобразований, мы можем применить обобщения:

		void SendMessage<T>(T message)
		{
    		Console.WriteLine($"Отправляется сообщение: {message.Text}");   // ! Ошибка - свойство Text
		}

	Обобщения позволяют избежать преобразований, но теперь мы сталкиваемся с другой проблемой - универсальный параметр T подразумевает любой тип. Но не любой тип имеет свойство Text. Соответственно свойство Text для объекта типа T не определено и мы не можем это свойство использоваться. Более того для объекта T по умолчанию нам достуны только методы типа object.

	Таким образом, возникает проблема: надо избежать преобразований типов и соответственно использовать обобщения, а с другой стороны, необходимо обращаться внутри метода к функционалу класса Message. И ограничения обобщений позволяют решить эту проблему.

Ограничения методов

	Ограничения методов указываются после списка параметров после оператора where:
	
		имя_метода<T>(параметры) where T: тип_ограничения	

	После оператора where указывается универсальный параметр, для которого применяется ограничение. И через двоеточие указывается тип ограничения - обычно в качестве ограничения выступает конкретный тип.

	Например, применим ограничения к методу SendMessage, который отправляет объекты Message:

		void SendMessage<T>(T message) where T : Message
		{
		    Console.WriteLine($"Отправлено сообщение: {message.Text}");
		}
	    SendMessage<Message>(new Message("Я енотик полоскун!!"));
        SendMessage<EmailMessage>(new EmailMessage("У меня дома посется коза с бородой"));
		SendMessage<SMSMessage>(new SMSMessage("Я ем кашу вилкой"));		

	Выражение where T: Message в определении метода SendMessage говорит, что через универсальный параметр T будут передаваться объекты класса Message и производных классов. Благодаря этому компилятор будет знать, что T будет иметь функционал класса Message, и соответственно мы сможем обратиться к методам и свойствам класса Message внутри метода без проблем.

	При вызове метода нам необязательно указывать тип в угловых скобках - компилятор на основании переданного значения сам определит каким типом типизиуется метод:

		SendMessage(new EmailMessage("У меня дома посется коза с бородой"));

	Однако это можно сделать и явно:

		SendMessage<EmailMessage>(new EmailMessage("У меня дома посется коза с бородой"));

Ограничения обобщений в типах

	Подобным образом можно определять и ограничения обобщенных типов. Например, ограничения обобщенных классов:

		class имя_класса<T> where T: тип_ограничения

	В качестве примера определим класс мессенджера, который будет отправлять сообшения в виде объектов Message:

		public class Messenger<T> where T : Message
	    {
	        public void SendMessage(T message)
	        {
	            Console.WriteLine($"Отправлено сообщение: {message.Text}");
	        }
	    }
	    public class Message
	    {
	        public string Text { get; set; }
	        public Message(string Text)
	        {
	            this.Text = Text;
	        }
	    }
	    public class EmailMessage : Message
	    {
	        public EmailMessage(string Text) : base(Text) { }
	    }
	    public class SMSMessage : Message
	    {
	        public SMSMessage(string Text) : base(Text) { }
	    }

	Здесь для класса Messenger опять же установлено ограничение where T : Message. То есть внутри класса Messenger все объекты типа T можно использовать как объекты Message. И в данном случае в классе Messenger в методе SendMessage опять эмулируется отправка сообщений.

	Применим класс для отправки сообщений:

		Messenger<EmailMessage> messenger1 = new Messenger<EmailMessage>();
	    messenger1.SendMessage(new EmailMessage("ЗДРАВСТВУЙТЕ!!!"));

        Messenger<SMSMessage> messenger2 = new Messenger<SMSMessage>();
		messenger2.SendMessage(new SMSMessage("КУ КУ!!"));

Типы ограничений и стандартные ограничения	

	В качестве ограничений мы можем использовать следующие типы:

	-классы

	-интерфейсы

	-class - универсальный параметр должен представлять класс

	-struct - универсальный параметр должен представлять структуру

	-new() - универсальный параметр должен представлять тип, который имеет общедоступный (public) конструктор без параметров

	Есть ряд стандартных ограничений, которые мы можем использовать. В частности, можно указать ограничение, чтобы использовались только структуры или другие типы значений:

		class Messenger<T> where T : struct {}
 
	При этом использовать в качестве ограничения конкретные структуры в отличие от классов нельзя.

	Также можно задать в качестве ограничения ссылочные типы:

		class Messenger<T> where T : class {}

	А также можно задать с помощью слова new в качестве ограничения класс или структуру, которые имеют общедоступный конструктор без параметров:

		class Messenger<T> where T : new() {}

	Если для универсального параметра задано несколько ограничений, то они должны идти в определенном порядке:

	1. Название класса, class, struct. Причем мы можем одновременно определить только одно из этих ограничений

	2. Название интерфейса

	3. new()

		class Smartphone<T> where T: Messenger, new() {}

Использование нескольких универсальных параметров

	Если класс использует несколько универсальных параметров, то последовательно можно задать ограничения к каждому из них:

		public class Messenger<P, T> 
            where P : Person
            where T : Message
        { 
            public void SendMessage(P sender, P receiver, T message)
            {
                Console.WriteLine($"Отправитель: {sender.Name} | Получатель: {receiver.Name} | Сообщение: {message.Text}");
            }
        }
        public class Person
        {
            public string Name { get; set; }
            public Person(string Name) { this.Name = Name; }
        }
        public class Message
        {
            public string Text { get; set; }
            public Message(string Text) { this.Text = Text; }
        }

    В данном случае для параметра P будут передаваться объекты типа Person, а для параметра T - объекты Message.

    Применим классы:

    	Person person1 = new Person("Oleg");
		Message message = new Message("QQQQQ brooo go na ribalky");
	    Person person2 = new Person("Gena");

        Messenger<Person, Message> viber = new Messenger<Person, Message>();
		viber.SendMessage(person1, person2, message);

	Консольный ввод:

		Отправитель: Oleg | Получатель: Gena | Сообщение: QQQQQ brooo go na ribalky