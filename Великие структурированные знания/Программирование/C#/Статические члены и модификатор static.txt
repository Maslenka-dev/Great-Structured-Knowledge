	Кроме обычных полей, методов, свойств классы и структуры могут иметь статические поля, методы, свойства. Статические поля, методы, свойства относятся ко всему классу/всей структуре и для обращения к подобным членам необязательно создавать экземпляр класса / структуры. Это озночает, что данное поле, метод или свойство будет принадлежать не каждому объекту класса, а всем им вместе.

	Если член класса объявляется как static, то он становится доступным до создания любых объектов своего класса и без ссылки на какой-нибудь объект. С помощью ключевого слова static можно объявлять как переменные, так и методы. Наиболее характерным примером члена типа static служит метод Main(), который объявляется таковым потому, что он должен вызываться операционной системой в самом начале выполняемой программы.

	Для того чтобы воспользоваться членом типа static за пределами класса, достаточно указать имя этого класса с оператором-точкой. Но создавать объект для этого не нужно. В действительности член типа static оказывается доступным не по ссылке на объект, а по имени своего класса.

	Переменные, объявляемые как static, по существу, являются глобальными. Когда же объекты объявляются в своем классе, то копия переменной типа static не создается. Вместо этого все экземпляры класса совместно пользуются одной и той же переменной типа static. Такая переменная инициализируется перед ее применением в классе. 

Статические поля
	
	Статические поля хранят состояние всего класса / структуры. Статическое поле определяется как и обычное, только перед типом поля указывается ключевое слово static. Например, рассмотрим класс Person, который представляет человека:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Console.WriteLine(Person.retirementAge);

		        Person pers1 = new Person(78);
		        pers1.CheckAge();
		        Person pers2 = new Person(56);
		        pers2.CheckAge();
		    }
		}
		class Person
		{
		    private int age;
		    public static int retirementAge = 65;
		    public Person(int age) => this.age = age; 
		    public void CheckAge()
		    {
		        if (age > retirementAge)
		        {
		            Console.WriteLine("ОЙ, ДА ВЫ УЖЕ ПЕНСИОНЕР!");
		        }
		        else
		        {
		            Console.WriteLine($"Сколько осталось лет до пенсии: {retirementAge - age}");
		        }
		    }
		}

	В данном случае класс Person имеет два поля: age (хранит возраст человека) и retirementAge (хранит пенсионный возраст). Однако поле retirementAge является статическим. Оно относится не к конкретному человеку, а ко всем людям. Таким образом, поле retirementAge относится не к отдельную объекту и хранит значение НЕ отдельного объекта класса Person, а относится ко всему классу Person и хранит общее значение для всего класса.

	Причем в самом классе мы можем использовать это поле как и любые другие. Так, в методе СheckAge(), который поверяет пенсионный статус человека, для проверки используем это поле:

		if (age > retirementAge)

	Но если мы хотим обратиться к этому полю вне своего класса, то мы можем обращаться к этому полю по имени класса:

		Console.WriteLine(Person.retirementAge);

	На уровне памяти для статических полей будет создаваться участок в памяти, который будет общим для всех объектов класса.

	При этом память для статических переменных выделяется даже в том случае, если не создано ни одного объекта этого класса.