	Лямбда-выражения представляют упрощенную запись анонимных методов. Лямбда-выражения позволяют создать емкие лаконичные методы, которые могут возвращать некоторое значение и которые можно передать в качестве параметров в другие методы.

	Ламбда-выражения имеют следующий синтаксис: слева от лямбда-оператора => определяется список параметров, а справа блок выражений, использующий эти параметры

	С точки зрения типа данных лямбда-выражение представляет делегат. Например, определим простейшее лямбда-выражение:

		Message message = () => Console.WriteLine("Hello");
		message();
		message();
		delegate void Message();

	В данном случае переменная message представляет делегат Message - то есть некоторое действие, которое ничего не возвращает и не принимает никаких параметров. В качестве значения этой переменной присваивается лямбда-выражение. Это лямбда-выражение должно соответствовать делегату Message - оно тоже не принимает никаких параметров, поэтому слева от лямбда-оператора идут пустые скобки. А справа от лямбда-оператора идет выполняемое выражение - Console.WriteLine("Hello")

	Затем в программе можно вызывать эту переменную как метод.

	Если лямбда-выражение содержит несколько действий, то они помещаются в фигурные скобки:

		Message message = () =>
		{	
	    	Console.Write("Hello");
	    	Console.WriteLine(" World");
		};
		message();

	Выше мы определили переменную message, которая представляет делегат Message. Но начиная с версии C# 10 мы можем применять неявную типизацию (определение переменной с помощью оператора var) при определении лямбда-выражения:

		var message = () => Console.WriteLine("Hello!!");
		message();
		message();
		message();

	Но какой тип в данном случае представляет переменная hello? При неявной типизации компилятор сам пытается сопоставить лямбда-выражение на основе его опеределения с каким-нибудь делегатом. Например, выше определенное лямбда-выражение hello по умолчанию компилятор будет рассматривать как переменную встроенного делегата Action, который не принимает никаких параметров и ничего не возвращает.

Возвращение результата
	
	Лямбда-выражение может возвращать результат. Возвращаемый результат можно указать после лямбда-оператора:

		Operation operation = (int x, int y) => x + y;
		Console.WriteLine(operation(4, 5));
		Console.WriteLine(operation(14, 3));
		delegate int Operation(int x, int y);

	или 

		var operation = (int x, int y) => x + y;
		Console.WriteLine(operation(4, 5));
		Console.WriteLine(operation(14,3));

	Если лямбда-выражение содержит несколько выражение, тогда нужно использовать оператор return, как в обычных методах:

		Operation operation = (int x, int y) =>
		{
			if (x > y) return x - y;
			else return y - x;
		};
		delegate int Operation(int x, int y);

Добавление и удаление действий в лямбда-выражении
 
 	Поскольку лямбда-выражение представляет делегат, то как и в делегат, в переменную, которая представляет лямбда-выражение можно добавлять методы и другие лямбды:

	var hello = () => Console.WriteLine("OK I PULL UP");
	var message = () => Console.Write("Hello");
	message += () => Console.WriteLine(" World");
	message += hello;
	message += Programm.Print;
	message();

	Console.WriteLine();

	message -= Programm.Print;
	message -= hello;
	message?.Invoke(); // На случай, если в message больше нет действий
