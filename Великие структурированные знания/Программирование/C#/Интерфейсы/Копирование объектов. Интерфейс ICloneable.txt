	Поскольку классы представляют ссылочные типы, то это накладывает некоторые ограничения на их использование. В частности, допустим, у нас есть следующий класс:

		class Person 
	    {
	        public string Name { get; set; }
	        public int Age { get; set; }
	        public Person(string Name, int Age)
	        {
	            this.Name = Name;
	            this.Age = Age;
	        }
	    }

	Создадим один объект Person и попробуем скопировать его данные в другой объект Person:

	 	var person1 = new Person("Tom", 18);
        var person2 = person1;
        person2.Age = 45;
        Console.WriteLine($"person1: Name: {person1.Name} | Age: {person1.Age}");  // person1: Name: Bob | Age: 45
        Console.WriteLine($"person2: Name: {person2.Name} | Age: {person2.Age}");  // person2: Name: Bob | Age: 45

    В данном случае объекты tom и bob будут указывать на один и тот же объект в памяти, поэтому изменения свойств для переменной bob затронут также и переменную tom.

    Чтобы переменная bob указывала на новый объект, но при этом имела значения из переменной tom, мы можем применить клонирование с помощью реализации интерфейса ICloneable:

	    public interface ICloneable
		{
	    	object Clone();
		}

Поверхностное копирование

		public static void Main(string[] args)
	    {
	        var person1 = new Person("Tom", 11);
	        var person2 = (Person)person1.Clone();
	        person2.Age = 45;
	        Console.WriteLine($"person1: Name: {person1.Name} | Age: {person1.Age}");  // person1: Name: Tom | Age: 11
	        Console.WriteLine($"person2: Name: {person2.Name} | Age: {person2.Age}");  // person2: Name: Tom | Age: 45
	    }
	    interface IClonable
	    {
	        object Clone();
	    }
	    class Person : ICloneable
	    {
	        public string Name { get; set; }
	        public int Age { get; set; }
	        public Person(string Name, int Age)
	        {
	            this.Name = Name;
	            this.Age = Age; 
	        }
	        public object Clone() => new Person(Name, Age);  
	    }

	Теперь все нормально копируется, изменения в свойствах переменной bob не сказываются на свойствах из переменной tom.

	Для сокращения кода копирования мы можем использовать специальный метод MemberwiseClone(), который возвращает копию объекта:

		public static void Main(string[] args)
	    {
	        var person1 = new Person("Tom", 11);
	        var person2 = (Person)person1.Clone();
	        person2.Age = 45;
	        Console.WriteLine($"person1: Name: {person1.Name} | Age: {person1.Age}");  // person1: Name: Tom | Age: 11
	        Console.WriteLine($"person2: Name: {person2.Name} | Age: {person2.Age}");  // person2: Name: Tom | Age: 45
	    }
	    interface IClonable
	    {
	        object Clone();
	    }
	    class Person : ICloneable
	    {
	        public string Name { get; set; }
	        public int Age { get; set; }
	        public Person(string Name, int Age)
	        {
	            this.Name = Name;
	            this.Age = Age; 
	        }
	        public object Clone() => MemberwiseClone();
	    }

	Этот метод реализует поверхностное (неглубокое) копирование. Однако данного копирования может быть недостаточно. Например, пусть класс Person содержит ссылку на объект класса Company:

		class Person : ICloneable
	    {
	        public string Name { get; set; }
	        public int Age { get; set; }
	        public Company Work { get; set; }
	        public Person(string Name, int Age, Company company)
	        {
	            this.Name = Name;
	            this.Age = Age;
	            Work = company;
	        }
	        public object Clone() => MemberwiseClone();
	    }
	    class Company
	    {
	        public string Name { get; set; }
	        public Company(string Name) => this.Name = Name;
	    }

	В этом случае при копировании новая копия будет указывать на тот же объект Company:

		var person1 = new Person("Tom", 11, new Company("Microsoft"));
        var person2 = (Person)person1.Clone();
        person2.Age = 30;
        person2.Work.Name = "Apple";
        Console.WriteLine($"person1: Name: {person1.Name} | Age: {person1.Age} | Company: {person1.Work.Name}"); 
        Console.WriteLine($"person2: Name: {person2.Name} | Age: {person2.Age} | Company: {person2.Work.Name}");

    Консоль: 

        person1: Name: Tom | Age: 11 | Company: Apple
		person2: Name: Tom | Age: 30 | Company: Apple

Глубокое копирование

	Поверхностное копирование работает только для свойств, представляющих примитивные типы, но не для сложных объектов. И в этом случае надо применять глубокое копирование:

		public static void Main(string[] args)
	    {
	        var person1 = new Person("Tom", 11, new Company("Microsoft"));
	        var person2 = (Person)person1.Clone();
	        person2.Age = 30;
	        person2.Work.Name = "Apple";
	        Console.WriteLine($"person1: Name: {person1.Name} | Age: {person1.Age} | Company: {person1.Work.Name}");
	        Console.WriteLine($"person2: Name: {person2.Name} | Age: {person2.Age} | Company: {person2.Work.Name}");
	    }
	    interface IClonable
	    {
	        object Clone();
	    }
	    class Person : ICloneable
	    {
	        public string Name { get; set; }
	        public int Age { get; set; }
	        public Company Work { get; set; }
	        public Person(string Name, int Age, Company company)
	        {
	            this.Name = Name;
	            this.Age = Age;
	            Work = company;
	        }
	        public object Clone() => new Person(Name, Age, new Company(Work.Name));
	    }
	    class Company
	    {
	        public string Name { get; set; }
	        public Company(string Name) => this.Name = Name;
	    }

	Консоль:

		person1: Name: Tom | Age: 11 | Company: Microsoft
		person2: Name: Tom | Age: 30 | Company: Apple