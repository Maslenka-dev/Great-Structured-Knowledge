	Делегаты представляют такие объекты, которые указывают на методы. То есть делегаты - это указатели на методы и с помощью делегатов мы можем вызвать данные методы.

Определение делегатов

	Для объявления делегата используется ключевое слово delegate, после которого идет возвращаемый тип, название и параметры.

	Прежде всего сначала необходимо определить сам делегат. Для использования делегата объявляется переменная этого делегата. Далее в переменную делегата передается адрес определенного метода. Обратите внимание, что данный метод имеет тот же возвращаемый тип и тот же набор параметров, что и делегат. Затем через делегат вызываем метод, на который ссылается данный делегат. Вызов делегата производится подобно вызову метода.

		delegate void Message();
		void Hello() => Console.WriteLine("Hello!");
		Message mes;
		mes = Hello;
		mes();

Добавление методов в делегат

	Делегат может указывать на множество методов, которые имеют ту же сигнатуру и возвращаемые тип. Все методы в делегате попадают в специальный список - список вызова или invocation list. И при вызове делегата все методы из этого списка последовательно вызываются. И мы можем добавлять в этот список не один, а несколько методов. Для добавления методов в делегат применяется операция +=:

		Question message = new Programm().Hello;
		message += new Programm().HowOldAreYou;
		message += new Programm().HowOldAreYou;
		message += new Programm().HowOldAreYou;
		message += new Programm().Hello;
		message();

		class Programm
		{
		    public void Hello() => Console.WriteLine("Hello!");
		    public void HowOldAreYou() => Console.WriteLine("How old are you?");

		    public static void Main(string[] args) { }
		}

		delegate void Question();

Объединение делегатов

		Message message = new Programm().Hello;
		Message message2 = new Programm().HowOldAreYou;
		Message message3 = message + message2; // Объединение делегат
		message3(); // Вызываются все методы из message и message2

		class Programm
		{
		    public void Hello() => Console.WriteLine("Hello");
		    public void HowOldAreYou() => Console.WriteLine("HowOldAreYou?");

		    public static void Main(string[] args) { }
		}
		delegate void Message();

	В данном случае объект mes3 представляет объединение делегатов mes1 и mes2. Объединение делегатов значит, что в список вызова делегата mes3 попадут все методы из делегатов mes1 и mes2. И при вызове делегата mes3 все эти методы одновременно будут вызваны.

Invoke()
	
		Operation operation = new Programm().Add;
		int num = operation.Invoke(3, 6);
		Console.WriteLine(num);

		Message mes = new Programm().Hello;
		mes.Invoke();

		class Programm
		{
		    public int Add(int x, int y) => x + y;
		    public void Hello() => Console.WriteLine("Hello");

		    public static void Main(string[] args) { }
		}
		delegate int Operation(int x, int y);
		delegate void Message();

	Если делегат принимает параметры, то в метод Invoke передаются значения для этих параметров.
	Следует учитывать, что если делегат пуст, то есть в его списке вызова нет ссылок ни на один из методов (то есть делегат равен Null), то при вызове такого делегата мы получим исключение.

	Поэтому при вызове делегата всегда лучше проверять, не равен ли он null. Либо можно использовать метод Invoke и оператор условного null:

		Message? message = null;
		message?.Invoke();

		Operation? operation = null;
		int? num = operation?.Invoke(4, 9);
		Console.WriteLine(num);

		class Programm
		{
		    public int Add(int x, int y) => x + y;
		    public void Hello() => Console.WriteLine("Hello");

		    public static void Main(string[] args) { }
		}
		delegate int Operation(int x, int y);
		delegate void Message();

Обобщенные делегаты
	
		Operation<int, int> operation = new Programm().Add;
		Console.WriteLine(operation(5));

		Operation<decimal, decimal> operation2 = new Programm().Square;
		Console.WriteLine(operation2(5.541m));

		class Programm
		{
		    public int Add(int x) => x + x;
		    public decimal Square(decimal x) => x * x;

		    public static void Main(string[] args) { }
		}
		delegate T Operation<T, K>(K value);

	