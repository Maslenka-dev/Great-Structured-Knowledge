	Допустим у нас есть иерархия классов: 

	    class Person
	    {
	        public string Name { get; set; }
	        public Person(string Name) => this.Name = Name;
	        public void Print() => Console.WriteLine($"Имя: {Name}");
	    }
	    class Employee : Person
	    {
	        public string Company { get; set; }
	        public Employee(string Name, string Company) : base(Name) => this.Company = Company;
	    }
	    class Client : Person
	    {
	        public string Bank { get; set; }
	        public Client(string Name, string Bank) : base(Name) => this.Bank = Bank;
	    }

	В этой иерархии мы можем проследить следующую цепь наследования: Object(Все классы неявно наследуются от типа Object) > Person > Employee | Client.

	Причем в этой иерархии классов базовые типы находятся вверху, а производные - внизу.

Восходящие преобразования. Upcasting

	Объекты производного типа в тоже время представляют и базовый тип. Например объект Employee в то же время является и объектом класса Person. Что в принципе естественно, так как каждый сотрудник(Employee) является человеком(Person). И мы можем написать, например сладующим образом: 

		Employee employee = new Employee("Дейв", "Apple");
		Person person = employee; // Upcasting. Преобразование от Employee к Person
	    person.Print();

	    Также: 

	    Console.WriteLine(person.Name);
        // Console.WriteLine(person.Company); Ошибка! тип Person не содержит поля Company

	В данном случае переменной person, которая представляет тип Person, присваивается ссылка на объект Employee. Но чтобы сохранить ссылку на объект одного класса в переменную другого класса, необходимо выполнить преобразование типов - в данном случае от типа Employee к типу Person. И так как Employee наследуется от класса Person, то автоматически выполняется неявное восходящее преобразование - преобразование к типу, которые находятся вверху иерархии классов, то есть к базовому классу.

	В итоге переменные employee и person будут указывать на один и тот же объект в памяти, но переменной person будет доступна только та часть, которая представляет функционал типа Person.

	Подобным образом поизводятся и другие восходящие преобразования:

		Person person2 = new Client("Гэри", "Sber"); // Upcasting. Преобразование от Client к Person
	    person2.Print(); 

	Здесь переменная person2, которая представляет тип Person, хранит ссылку на объект Client, поэтому также выполняется восходящее неявное преобразование от производного класса Client к базовому типу Person.

	Восходящее неявное преобразование будет происходить и в следующем случае:

		object person3 = new Employee("Патрик", "Amazon"); // Upcasting преобразование от Employee к Object
	                                                       // Object (все классы неявно наследуются от типа Object)
	    // person3.Print(); Ошибка! тип Object не содержит метод Print()

	Так как тип object - базовый для всех остальных типов, то преобразование к нему будет производиться автоматически.