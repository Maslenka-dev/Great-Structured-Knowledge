	Допустим у нас есть 2 класса:

		class Person
	    {
	        public string Name { get; set; }
	        public void Print() => Console.WriteLine(Name);
	        public Person(string Name) { this.Name = Name; }
	    }
	    class Employee : Person
	    {
	        public string Company { get; set; }
	        public Employee(string Name, string Company) : base(Name) { this.Company = Company; }
	    }

	Класс Person имеет конструктор, который устанавливает свойство Name. Поскольку класс Employee наследует и устанавливает то же свойство Name, то логично было бы не писать по сто раз код установки, а как-то вызвать соответствующий код класса Person. К тому же свойств, которые надо установить в конструкторе базового класса, и параметров может быть гораздо больше.

	С помощью ключевого слова base мы можем обратиться к базовому классу. В нашем случае в конструкторе класса Employee нам надо установить имя и компанию. Но имя мы передаем на установку в конструктор базового класса, то есть в конструктор класса Person, с помощью выражения base(name).

		Person person = new Person("Bob");
		person.Print();     // Bob
		Employee employee = new Employee("Tom", "Microsoft");
		employee.Print();   // Tom

Ключевое слово base при переопределении методов или их скрытии

	Переопределение методов:

	Кроме конструкторов, мы можем обратиться с помощью ключевого слова base к другим членам базового класса. В нашем случае вызов base.Print(); будет обращением к методу Print() в классе Person:

		class Person
	    {
	        public string Name { get; set; }
	        public virtual void Print() => Console.WriteLine(Name);
	        public Person(string Name) { this.Name = Name; }
	    }
	    class Employee : Person
	    {
	        public string Company { get; set; }
	        public override void Print()
	        {
	            base.Print();
	            Console.WriteLine($"Работает в {Company}");
	        }
	        public Employee(string Name, string Company) : base(Name) { this.Company = Company; }
	        
	    }

	Скрытие методов: 

		class Person
	    {
	        public string Name { get; set; }
	        public void Print() => Console.WriteLine(Name);
	        public Person(string Name) { this.Name = Name; }
	    }
	    class Employee : Person
	    {
	        public string Company { get; set; }
	        public new void Print()
	        {
	            base.Print();
	            Console.Write($"Работает в {Company}");
	        }
	        public Employee(string Name, string Company) : base(Name) { this.Company = Company; }
	    }


