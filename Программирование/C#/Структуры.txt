	Структура (struct) в C# — это пользовательский тип данных, который используется наряду с классами и может содержать какие-либо данные и методы. Структурами также являются такие типы данных как  int, double и т.д. Основное отличие структуры (struct) от класса (class) заключается в том, что структура — это тип значений, а класс — это ссылочный тип.

Объявление структуры

	Для того, чтобы объявить переменную типа структуры в C# используется ключевое слово struct:

		struct имя_структуры
		{
		    // элементы структуры
		}


	Структура, описывающая точку в трехмерном пространстве:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Point3D point3D = new Point3D() { x = 15, y = 36, z = 91 };
		        Console.WriteLine(point3D.ToString()); // 15, 36, 91
		    }
		}
		public struct Point3D
		{
		    public double x {  get; set; }
		    public double y { get; set; }
		    public double z { get; set; }
		    public override string ToString()
		    {
		        return $"{x}, {y}, {z}";
		    }
		}

	Cтруктура содержит три свойства — координаты X,Y,Z и один переопределенный метод ToString, который возвращает строку с координатами точки.

Создание структуры

	Если структура содержит только публичные поля (не путать со свойствами) и методы, то можно не вызывать конструктор, а сразу назначить значение полей и после этого вызывать методы структуру. Например:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Point3D point3D;
		        point3D.x = 14;
		        point3D.y = 642;
		        point3D.z = 52;
		        Console.WriteLine(point3D.ToString()); // 14, 642, 52
		    }
		}
		public struct Point3D
		{
		    public double x;
		    public double y;
		    public double z;
		    public override string ToString()
		    {
		        return $"{x}, {y}, {z}";
		    }
		}

	Начиная с версии C# 10 полям структуры можно присваивать значения по умолчанию, однако, в этом случае необходимо объявить конструктор и вызвать new() , чтобы создать экземпляр структуры. Например:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Point3D point3D = new Point3D();
		        Console.WriteLine(point3D.ToString()); // 14, 642, 52
		    }
		}
		public struct Point3D
		{
		    public double x = 14;
		    public double y = 642;
		    public double z = 52;
		    public Point3D() { }
		    public override string ToString()
		    {
		        return $"{x}, {y}, {z}";
		    }
		}	

Инициализатор структур 

	Значения полей и свойств структуры, как в случае и с классами, можно задавать непосредственно при создании, используя следующую языковую конструкцию:

	Point3D point3D = new Point3D() { x = 5, y = 6, z = 7 };

	То есть вначале мы объявляем переменную, затем вызываем конструктор и затем в фигурных скобках указываем имена полей или свойств и их значения. Даже, если мы создадим и проинициализируем структуру вот так:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Point3D point3D = new Point3D(87, 2, 24) { x = 5, y = 6, z = 7 };
		        Console.WriteLine(point3D.ToString()); // 5, 6, 7
		    }
		}
		public struct Point3D
		{
		    public double x = 14;
		    public double y = 642;
		    public double z = 52;
		    public Point3D(double x, double y, double z) 
		    {
		        this.x = x;
		        this.y = y;
		        this.z = z;
		    }
		    public override string ToString()
		    {
		        return $"{x}, {y}, {z}";
		    }
		}

	то значения полей будут теми, которые мы указываем в инициализаторе, т.е. 5, 6 и 7.

	Рандомный код:

		class Programm
		{
		    public static void Main(string[] args)
		    {
		        Point3D point3D = new Point3D();  
		        Point3D point3D2 = new Point3D(87, 2, 24);  
		        Point3D point3D3 = new Point3D(87, 2, 24) { x = 5, y = 6, z = 7 };  
		        Console.WriteLine(point3D.ToString()); // 14, 642, 52
		        Console.WriteLine(point3D2.ToString()); // 87, 2, 24
		        Console.WriteLine(point3D3.ToString()); // 5, 6, 7
		    }
		}
		public struct Point3D
		{
		    public double x = 14;
		    public double y = 642;
		    public double z = 52;
		    public Point3D() { }
		    public Point3D(double x, double y, double z) 
		    {
		        this.x = x;
		        this.y = y;
		        this.z = z;
		    }
		    public override string ToString()
		    {
		        return $"{x}, {y}, {z}";
		    }
		}

Копирование структур с изменением значений (оператор with)

	Начиная с версии C# 10 мы можем копировать значения структур с изменениями, например:

		Point3D point3D = new Point3D(87, 2, 24);
		Point3D point3D2 = point3D with { x = 999 };
		Console.WriteLine(point3D.ToString()); // 87, 2, 24
		Console.WriteLine(point3D2.ToString()); // 999, 2, 24

Отличие структуры от класса
	
	Структура — тип значений, класс — ссылочный тип

	Основное отличие struct от class заключается в том, что структура храниться целиком в стеке, а объект класса храниться в куче, а ссылка на него — в стеке. В результате этого, доступ к данным структуре будет путь не намного, но быстрее, чем к классу.

	Структуры не поддерживают наследование

	В отличие от классов C#, наследование структур не поддерживается

Когда использовать структуры (struct), а когда классы (class) в C#

	Основная рекомендация от Microsoft может быть сформулирована следующим образом: структуры (struct) стоит использовать в том случае, если ваш объект содержит минимальное количество каких-либо логически связанных операций или не содержит их вообще.

	Например, использование структур вполне оправдано в примерах выше — описание точки в трехмерном пространстве. Максимум логики, которую мы можем добавить в структуру — это переопределить операторы сложения, вычитания и равенства.

	Если же мы пробуем описать с помощью своего типа данных, например, автомобиль, то тут уже логика может быть самая разветвленная: проверка наличия топлива в баке, технические характеристики, оценка состояния в зависимости от каких-либо внешних или внутренних факторов и т.д.  Соответственно, в этом случае, более предпочтительным будет использование не структуры, а класса.

Как и классы в C#, структуры позволяют определить пользовательский тип данных в вашем проекте. При этом, на первый взгляд, структуры (struct) практически ни чем не отличаются от классов, однако различия есть: во-первых, структуры относятся к типам значений, во-вторых, структуры не поддерживают механизмов наследования. Использовать или не использовать структуры — решение самого разработчика, однако, рекомендуется использовать тип struct только в том случае, если ваш пользовательский тип данных содержит минимум бизнес-логики или не содержит её вовсе.

