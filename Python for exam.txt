2 

	отрицание - not()
	конъюнкция - and
	дизъюнкция - or
	импликация - <=
	эквиваленция - ==

	print ('x y z w')
	for x in 0,1:
	    for y in 0,1:
	        for z in 0,1:
	            for w in 0,1:
	                if (x or (not y)) and (not(x == z) and (not w)) == 1:
	                    print(x, y, z, w)

    x y z w
	0 0 1 0
	1 0 0 0
	1 1 0 0
 	


	print ('x y z w')
	for x in 0,1:
	    for y in 0,1:
	        for z in 0,1:
	            for w in 0,1:
	                if (((x and w) or (w and z)) == ((z <= y) and (y <= x))) == 1:
	                    print(x, y, z, w)

	x y z w
	0 0 1 0
	0 1 0 0
	0 1 0 1
	0 1 1 0
	1 0 0 1
	1 0 1 0
	1 1 0 1
	1 1 1 1   



	print ('x y z w')
	for x in 0,1:
	    for y in 0,1:
	        for z in 0,1:
	            for w in 0,1:
	                if ((y <= w) == (x <= (not z)) and (x or w)) == 1:
	                    print(x, y, z, w)      

	print ('x y z w')
	for x in 0,1:
	    for y in 0,1:
	        for z in 0,1:
	            for w in 0,1:
	                if ((y <= w) == (x <= (not z)) and (x or w)) == 0:
	                    print(x, y, z, w)          
    
	x y z w     0
	0 0 0 0
	0 0 1 0
	0 1 0 0
	0 1 1 0 
	1 0 1 0
	1 0 1 1
	1 1 0 0
	1 1 1 1

	x y z w     1
	0 0 0 1
	0 0 1 1
	0 1 0 1
	0 1 1 1
	1 0 0 0
	1 0 0 1
	1 1 0 1
	1 1 1 0

	В Python конструкция for i in используется для итерации по различным итерируемым объектам. Это могут быть списки, строки, кортежи, словари, множества.

23 
	
	Условие: 3 - 15 - 50. траектория не содержит 55

	def f(x, y):
    if x > y or x == 33:
        return 0
    if x == y:
        return 1
    else:
        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)
	print(f(3, 15) * f(15, 50))

	Отв: 121

	// - оператор целочисленного деления

13(сложный вариант)

	import itertools
	count = 0
	s = itertools.product([0, 1], repeat = 20)
	for i in s:
	    if (5 + sum(i)) % 5 != 0:
	        count += 1
	print(count)

	количество единиц в двоичной записи IP-адреса не кратно 5

	Использование функции itertools.product() с параметром repeat=20 для списка [0, 1] создаст все возможные комбинации длиной 20, состоящие из элементов 0 и 1. Это эквивалентно генерации всех двоичных чисел от 00000000000000000000 до 11111111111111111111.

	sum() - встроенная функция, предназначенная для вычисления суммы всех элементов в итерируемом объекте, таком как список или кортеж.




	import itertools
	count = 0
	s = itertools.product([0, 1], repeat = 13)
	for i in s:
	    if i[12] == 1 and i[11] == 1:
	        if(10 + sum(i)) % 3 == 0:
	            count += 1
	print(count)

	количество единиц в двоичной записи IP-адреса кратно 3, а сама двоичная запись оканчивается на 11

16.2

	Условие: F(1) = 1 | F(2) = 1 | если n > 2, то F(n-1) * n - 2 * F(n-2)

	def F(n):
    if n == 1:
        return 1
    if n == 2:
        return 1
    if n > 2:
        return F(n-1) * n - 2 * F(n-2)
	print(F(6))




	Условие: F(n) = 1 если n = 1 | F(n) = n + F(n - 1) если n нечетно | F(n) = 2 * F(n - 2) если n > 1 и n нечетно

	def F(n):
    if n == 1:
        return 1
    if n % 2 == 0:
        return n + F(n - 1)
    if n > 1 and n % 2 != 0:
        return 2 * F(n - 2)
	print(F(26)) 

14

	Условие: 4 * 343 ** 5 + 6 * 49 ** 8 - 50 | Система счисления: 7. Сколько цифр 6 содержится в записи?

	x = 4 * 343 ** 5 + 6 * 49 ** 8 - 50
	s = ''
	while x != 0:
	    s += str(x % 7)
	    x //= 7
	s = s[::-1]
	print(s.count('6'))

	В Python конструкция [::-1] используется для обратного среза последовательностей, таких как списки и строки. Она позволяет получить все элементы последовательности в обратном порядке.


6

	ось ординат:

		import turtle - добавление библиотеки, предназначенной для создания графики с использованием черепахи
		t = turtle.Turtle() - создание объекта черепахи
		t.left(90) - поворот черепахи на лево для направления по оси ординат
		k = 40 - коэффициент масштабирования
		t.pendown() - ручка опущена
		turtle.tracer(0) - отключение анимации
		for i in range(7): 
		    t.forward(10*k) - вперед
		    t.right(120) - вправо, градус
		t.penup() - ручка поднята
		for x in range(-10, 10): - построение пространства точек по x 
		    for y in range(-10, 10): - построение пространства точек по y
		        t.setpos(x * k, y * k) - перемещение черепахи в точку в данный момент
		        t.dot(5, 'red') - отрисовка точки
		turtle.done() - завершение программы

	ось абсцисс:

		import turtle
		t = turtle.Turtle()
		k = 40
		t.pendown()
		turtle.tracer(0)
		for i in range(7):
		    t.forward(10*k)
		    t.right(120)
		t.penup()
		for x in range(-10, 10):
		    for y in range(-10, 10):
		        t.setpos(x * k, y * k)
		        t.dot(5, 'red')
		turtle.done()

	Пример решения +- сложного варика с осью ординат:

	Условие: 

	Повтори 9 [Вперёд 29 Направо 90 Вперёд 17 Направо 90]
	Поднять хвост
	Вперёд 5 Направо 90 Вперёд 1 Налево 90
	Опустить хвост
	Повтори 9 [Вперёд 64 Направо 90 Вперёд 48 Направо 90]
	Определите площадь пересечения фигур, нарисованных при помощи алгоритма.

		import turtle
		t = turtle.Turtle()
		t.left(90)
		k = 11
		t.pendown()
		turtle.tracer(0)
		for i in range(9):
		    t.forward(29 * k)
		    t.right(90)
		    t.forward(17 * k)
		    t.right(90)
		t.penup()
		t.forward(5 * k)
		t.right(90)
		t.forward(1 * k)
		t.left(90)
		t.pendown()
		for i in range(9):
		    t.forward(64 * k)
		    t.right(90)
		    t.forward(48 * k)
		    t.right(90)
		t.penup()
		for x in range (-50, 50):
		    for y in range(-50, 50):
		        t.setpos(x * k, y * k)
		        t.dot(5, 'red')
		turtle.done()

	24 * 16 = 384

12

	replace() - функция, использующаяся для замены подстрок в строке. Она возвращает новую строку, в которой все вхождения указанной подстроки заменяются на другую подстроку. 

		строка.replace(old, new, [count])

		- old: Подстрока, которую нужно заменить
		- new: Подстрока, на которую нужно заменить old
		- count (необязательный параметр): Количество замен, которые необходимо выполнить. Если этот параметр не указан, заменяются все вхождения old.

			txt = 'one one one one'
			txt = txt.replace('one', '1234', 3)
			print(txt) // 1234 1234 1234 one





	На вход этой программе подаётся строка длины 94, состоящая из цифры 3, за которой следуют 93 идущих подряд цифр 9. Условие: '3' + '9' * 93

	s = '3' + '9' * 93
	while ('19' in s or '29' in s or '3999' in s):
	    s = s.replace('19', '2', 1)
	    s = s.replace('299', '3', 1)
	    s = s.replace('3999', '1', 1)
	print(s)




	Какая строка получится в результате применения приведённой ниже программы к строке вида 1…12…2 (39 единиц и 39 двоек)? Условие: '1' * 39 + '2' * 39

	s = '1' * 39 + '2' * 39
	while ('111' in s):
	    s = s.replace('111', '2', 1)
	    s = s.replace('222', '1', 1)
	print(s)




	Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 70 идущих подряд цифр 8? Условие: '8' * 70

	s = '8' * 70
	while ('2222' in s or '8888' in s):
	    if('2222' in s):
	        s = s.replace('2222', '88', 1)
	    else:
	        s = s.replace('8888', '22', 1)
	print(s)

19, 20, 21

	all(someArray) - если все значения массива равны "True", значит функция возвращает true,
		а если хотя бы один элемент будет равен "False", то и функция вернёт False.

		a = [True, True, True, False]
		print(all(a)) // False

	bool(someValue) - функция, приводящая переменные разных типов к булевому значению. 

		a = [1, 1.5, 13541, 0, "", "45", [], {}]
		b = [1, 1.5, 13541, 5, "124", "45", [2], {''}]
		print(all(a), all(b)) // False True

	any(someArray) - возвращает True, если хотя бы один элемент равен "True". Если все значения равны "False", то и функция вернет False.

		a = [1, 1.5, 13541, 0, "", "45", [], {}]
		print(any(a)) // True

	Рекурсия	

		def f(x, y):
		    d = x + y;
		    if x % 2 == 0:
		        return d
		    else:
		        return f(x + 1, y * 3)
		print(f(3 , 4))	

поменять ол на эни в случае если в 19 задании спрашивают (после неудачного хода пети), но для 20 и 21 меняем обратно на ол

	19) Условие: stop 56 | + 1 | +2 | *2| петя даун. Ваня выиграл своим первым ходом после неудачного первого хода Пети

		def f(x, h):
		    if x >= 56:
		        return h % 2 == 0
		    if h == 0:
		        return False 
		    moves = [f(x + 1, h - 1), f(x + 2, h - 1), f(x * 2, h - 1)]
		    if h % 2 != 0:
		        return any(moves)  
		    else:
		        return any(moves)  

		print([s for s in range(1, 57) if f(s, 2)])

	Если в 19 задании спрашивается победа Вани или Пети после НЕУДАЧНОГО ХОДА противника, необходимо в 10 строчке поменять all на any. В 20 и 21 заданиях не трогаем эту строку.

