Функции черепахи:

	forward(x) или fd(x) - двигает черепаху вперёд на x шагов.
	backward(x) или bk(x) - двигает назад на x шагов.
	right(a) или rt(a) - поворачивает направо на a градусов.
	left(a) или lt(a) - поворачивает налево на a градусов.
	goto(x, y) - перемещает в точку с координатами (x, y). Аналог setpos(x, y).
	home() - возвращает черепаху в центр (0, 0), направляя вверх.
	setheading(a) или seth(a) - задаёт направление движения (0° - вправо, 90° - вверх)

	pendown() или down() - опускает перо (черепаха рисует).
	penup() или up() - поднимает перо (перемещается без следа)

	tracer() - управление анимацией.

	screensize(width, height) - размер поля рисования.

	done() - завершить рисование (ставить в конце программы).

---------------------------------------------------------------------------------

ось ординат:

		import turtle - добавление библиотеки, предназначенной для создания графики с использованием черепахи
		t = turtle.Turtle() - создание объекта черепахи
		t.left(90) - поворот черепахи на лево для направления по оси ординат
		k = 40 - коэффициент масштабирования
		t.pendown() - ручка опущена
		turtle.tracer(0) - отключение анимации
		for i in range(7): 
		    t.forward(10*k) - вперед
		    t.right(120) - вправо, градус
		t.penup() - ручка поднята
		for x in range(-10, 10): - построение пространства точек по x 
		    for y in range(-10, 10): - построение пространства точек по y
		        t.setpos(x * k, y * k) - перемещение черепахи в точку в данный момент
		        t.dot(5, 'red') - отрисовка точки
		turtle.done() - завершение программы

ось абсцисс:

	import turtle
	t = turtle.Turtle()
	k = 40
	t.pendown()
	turtle.tracer(0)
	for i in range(7):
	    t.forward(10*k)
	    t.right(120)
	t.penup()
	for x in range(-10, 10):
	    for y in range(-10, 10):
	        t.setpos(x * k, y * k)
	        t.dot(5, 'red')
	turtle.done()

ось ординат, Направо 90, Повтори 7 [Направо 45 Вперёд 11 Направо 45]. Определите, сколько точек с целочисленными координатами находится внутри области, которая ограничена линией, заданной алгоритмом. Точки на линии учитывать не следует.

	import turtle
	t = turtle.Turtle()
	turtle.tracer(0)
	t.left(90)
	k = 20
	t.right(90)
	t.pendown()
	for i in range(7):
	    t.right(45)
	    t.forward(11 * k)
	    t.right(45)
	t.penup()
	for x in range(-20, 20):
	    for y in range(-20, 20):
	        t.setpos(x * k, y * k)
	        t.dot(5, 'red')
	turtle.done()

ось ординат, Повтори 3 [Вперёд 10 Направо 120 Вперёд 10 Направо 120], Повтори 3 [Вперёд 10 Налево 120 Вперёд 10 Налево 120]. Определите, сколько точек с целочисленными координатами будут находиться внутри объединения фигур, ограниченного заданными алгоритмом линиями, включая точки на линиях.

	import turtle
	turtle.tracer(0)
	t = turtle.Turtle()
	t.left(90)
	k = 50
	t.pendown()
	for i in range(3):
	    t.forward(10 * k)
	    t.right(120)
	    t.forward(10 * k)
	    t.right(120)
	for i in range(3):
	    t.forward(10 * k)
	    t.left(120)
	    t.forward(10 * k)
	    t.left(120)
	t.penup()
	for x in range(-50, 50):
	    for y in range(-50, 50):
	        t.setpos(x * k, y * k)
	        t.dot(5, 'red')
	turtle.done()

ось ординат, Повтори 2 [Вперёд 12 Направо 90 Вперёд 7 Направо 90], Поднять хвост, Вперёд 5 Направо 90, Опустить хвост,
Повтори 2 [Вперёд 4 Направо 90 Вперёд 9 Направо 90]. Определите площадь области пересечения фигур, которые ограничены заданными алгоритмом линиями.

	from turtle import *
	tracer(0)
	lt(90)
	k = 20
	pendown()
	for i in range(2):
	    fd(12*k)
	    rt(90)
	    fd(7*k)
	    rt(90)
	penup()
	fd(5*k)
	rt(90)
	pendown()
	for i in range(2):
	    fd(4*k)
	    rt(90)
	    fd(9*k)
	    rt(90)
	up()
	for x in range(-50, 50):
	    for y in range(-50, 50):
	        setpos(x * k, y * k)
	        dot(5, 'red')
	done()

ось ординат, Повтори 6 [Вперёд 5 Направо 60], Поднять хвост, Вперёд 5 Направо 90, Опустить хвост, Повтори 2 [Вперёд 15 Направо 90 Вперёд 5 Направо 90]. Определите, сколько точек с целочисленными координатами будут находиться внутри пересечения фигур, ограниченных заданными алгоритмом линиями, не включая точки на границах этого пересечения.


	from turtle import *
	tracer(0)
	lt(90)
	k = 20
	down()
	for i in range(6):
	    fd(5*k)
	    rt(60)
	up()
	fd(5*k)
	rt(90)
	down()
	for i in range(2):
	    fd(15*k)
	    rt(90)
	    fd(5*k)
	    rt(90)
	up()
	for x in range(-20, 20):
	    for y in range(-20, 20):
	        goto(x*k, y*k)
	        dot(5, 'red')
	done()

ось ординат, Повтори 5 [Вперёд 35 Направо 90 Вперёд 24 Направо 90], Поднять хвост, Направо 90 Вперёд 7 Направо 90 Вперёд 5, Опустить хвост, Повтори 1001 [Направо 90 Вперёд 20 Направо 90 Вперёд 36].

	from turtle import *
	tracer(0)
	lt(90)
	k = 14
	down()
	for i in range(5):
	    fd(35*k)
	    rt(90)
	    fd(24*k)
	    rt(90)
	up()
	rt(90)
	fd(7*k)
	rt(90)
	fd(5*k)
	down()
	for i in range(1001):
	    rt(90)
	    fd(20*k)
	    rt(90)
	    fd(36*k)
	up()
	for x in range(-100, 100):
	    for y in range(-100, 100):
	        goto(x*k, y*k)
	        dot(5, 'red')
	done()



