Двоичная система

		На вход алгоритма подается натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится двоичная запись числа N
		2. К этой записи дописывается разряд по следующему правилу: если два младших (правых) разряда одинаковые, справа дописывается 0, иначе справа дописывается 1.
		3. К полученной записи дописывается еще один бит по правилу в пункте 2.
		Полученная таким образом запись является двоичной записью искомого числа R.
		Укажите минимальное число N, при вводе которого получится значение R больше, чем 93. В ответе полученное число запишите в десятичной системе.

			def f(N):
			    res = bin(N)[2:]
			    for i in range(2):
			        if res[-1] == res[-2]: res += '0'
			        else: res += '1'
			    return int(res, 2)
			print(min(N for N in range(5, 100) if f(N) > 93))		

			[-1] - срез указывает на последнее число.
			[-2] - срез указывает на предпоследнее число.		

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом. 
		1. Строится двоичная запись числа N.
		2. Полученная запись переворачивается (записывается слева направо).
		3. К полученной записи справа дописывается правый бит.
		Полученная таким образом запись (в ней на один разряд больше, чем в записи исходного числа N) является двоичной записью искомого числа R. Укажите минимальное число N в результате обработки которого получится число, большее 99. В ответе это число запишите в десятичной системе.

			def f(N):
			    res = bin(N)[2:]
			    res = res[::-1]
			    res += res[-1]
			    return int(res, 2)
			print(min([N for N in range(0, 100) if f(N) > 99]))

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом. 
		1. Строится двоичная запись числа N.
		2. К этой записи дописываются справа и слева ещё по одному или два разряда по следующему правилу: если N чётное, то в конец числа (справа) дописывается нуль, а в начало числа (слева) дописывается единица; если N нечётное, то в конец числа (справа) и в начало числа (слева) дописываются по две единицы. 
		Укажите наименьшее число R, превышающее 225, которое может являться результатом работы данного алгоритма. В ответе это число запишите в десятичной системе счисления.

			def f(N):
			    res = bin(N)[2:]
			    r = ''
			    if N % 2 == 0: 
			        r += '1' + res + '0'
			    else: 
			        r += '11' + res + '11'
			    return int(r, 2)
			R = []
			for i in range(0, 1000):
			    R.append(f(i))
			print(sorted(R)) 

			Находим минимальное число, превышающее 225 в списке чисел.

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится двоичная запись числа N.
		2. Все разряды полученного числа инвертируются.
		3. К полученному результату справа дописывается бит четности.
		Бит чётности это остаток от деления на 2 суммы цифр двоичной записи числа.
		Укажите максимальное число R, меньшее 170, которое может быть получено в результате работы этого алгоритма. В ответе это число запишите в десятичной системе.

			def f(N):
			    res = bin(N)[2:]
			    r = ''
			    for i in res:
			        if i == '1': r += '0'
			        else: r += '1'
			    l = res.count('1')
			    r += str(l % 2)
			    return int(r, 2)
			R = []
			for i in range(0, 1000):
			    R.append(f(i))
			print(sorted(R))

			Находим максимальное число, меньше 170 в списке чисел.

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится двоичная запись числа N.
		2. Далее эта запись обрабатывается по следующему правилу: если число N делится на 3, то к этой записи дописываются три последние двоичные цифры; если число N на 3 не делится, то остаток от деления умножается на 3, переводится в двоичную запись и дописывается в конец числа.
		3. Результат переводится в десятичную систему и выводится на экран.
		Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R, меньшее чем 76.

			def f(N):
			    res = bin(N)[2:]
			    r = ''
			    if N % 3 == 0: r += res + res[-3] + res[-2] + res[-1]
			    else: r += res + (bin((N % 3) * 3)[2:])
			    return int(r, 2)
			print(max([N for N in range(4, 1000) if f(N) < 76]))

		Автомат обрабатывает натуральное число N по следующему алгоритму:
		1. Строится двоичная запись числа N.
		2. Из записи удаляются все нули.
		3. Полученное число переводится в десятичную запись и выводится на экран.
		Сколько разных значений будет показано на экране автомата при последовательном вводе всех натуральных чисел от 10 до 2500.

			def f(N):
			    res = bin(N)[2:]
			    r = ''
			    l = res.count('1')
			    r += '1' * l
			    return int(r, 2)
			r = set()
			for i in range(10, 2501):
			    r.add(f(i))
			print(len(r))

    	Строится двоичная запись числа N.
    	Далее эта запись обрабатывается по следующему правилу:
    	а) если число N делится на 3, то к этой записи дописываются три последние двоичные цифры;
    	б) если число N на 3 не делится, то остаток от деления умножается на 3, переводится в двоичную запись и дописывается в конец числа. Полученная таким образом запись является двоичной записью искомого числа R.
		Укажите минимальное число R, большее 151, которое может быть получено с помощью описанного алгоритма. В ответе запишите это число в десятичной системе счисления.

			def f(n):
			    r = bin(n)[2::]
			    if n % 3 == 0: r = r + r[-3] + r[-2] + r[-1]
			    else: r = r + bin((n % 3) * 3)[2::]
			    return int(r, 2)
			print(min([f(N) for N in range(10, 1000) if f(N) > 151]))	


	    Строится двоичная запись числа N
	    Далее эта запись обрабатывается так:
	    а) если число нечётное, к двоичной записи слева дописывается 1, а последние две цифры справа заменяются на 10
	    б) если число чётное, к двоичной записи справа дописывается 1, а первые две цифры слева заменяются на 10
	    Таким образом получается двоичная запись искомого числа R
	    Результат переводится в десятичную систему и выводится на экран
		Укажите минимальное число R, которое может быть результатом этого алгоритма при условии, что N не меньше 33. В ответе запишите это число в десятичной системе счисления.	

			def f(n):
			    r = bin(n)[2::]
			    r = list(r)
			    if n % 2 != 0: 
			        r[-2] = '1'
			        r[-1] = '0'
			        r = ['1'] + r
			    else: 
			        r[0] = '1'
			        r[1] = '0'
			        r = r + ['1']
			    r = ''.join(r)
			    return int(r, 2)
			print(min(f(N) for N in range(1, 1000) if N >= 33))


	    Строится двоичная запись числа N
	    Далее эта запись обрабатывается так:
	    а) если число нечётное, в двоичной записи справа две последние цифры заменяются на 10
	    б) если число чётное, к двоичной записи справа дописывается 1, а первые две цифры слева заменяются на 10
	    Таким образом получается двоичная запись искомого числа R
	    Результат переводится в десятичную систему и выводится на экран
		Укажите минимальное число R, которое может быть результатом этого алгоритма при условии, что N не меньше 26. В ответе запишите это число в десятичной системе счисления.

			def f(n):
			    r = bin(n)[2::]
			    r = list(r)
			    if n % 2 != 0: 
			        r[-2] = '1'
			        r[-1] = '0'
			    else: 
			        r[0] = '1'
			        r[1] = '0'
			        r.append('1')
			    r = ''.join(r)
			    return int(r, 2)
			print(min(f(N) for N in range(1, 1000) if N >= 26))	
			
			ИЛИ

			def f(n):
				r = bin(n)[2::]
				if n % 2 != 0: 
					r = r[:-2] + '10'
				else: 
					r = '10' + r[2:] + '1'
				return int(r, 2)
			print(min(f(N) for N in range(1, 1000) if N >= 26))	

Десятичная система

		Автомат получает на вход пятизначное число. По этому числу строится новое число по следующим правилам.
		1. Вычисляется квадрат суммы наибольшей и наименьшей цифр исходного числа.
		2. Вычисляется произведение всех чётных цифр исходного числа.
		3. Полученные два числа записываются друг за другом в порядке невозрастания (без разделителей).
		Укажите наименьшее число, при обработке которого автомат выдаст число 12116.

			def f(n):
			    digits = sorted(map(int, str(n)))
			    res1 = (digits[0] + digits[-1])**2
			    res2 = 1
			    for i in digits:
			        if i % 2 == 0: res2 *= i
			    if res1 > res2: return str(res1) + str(res2)
			    else: return str(res2) + str(res1)
			print(min([n for n in range(10000, 100000) if int(f(n)) == 12116]))		

		Автомат получает на вход натуральное четырёхзначное число N. По этому числу строится новое число по следующим правилам:
    	1. Цифры числа сортируются по возрастанию.
    	2. Для полученного числа складываются 1 и 4 цифры и перемножаются 2 и 3 цифры.
    	3. Результаты сложения и умножения записываются друг за другом: сначала результат сложения, затем умножения.
		Сколько существует чисел N, в результате применения к которым данного алгоритма получается число 1128?

			def f(n):
			    digits = sorted(map(int, str(n)))
			    res1 = digits[0] + digits[3]
			    res2 = digits[1] * digits[2]
			    resAll = str(res1) + str(res2) 
			    return int(resAll)
			r = 0
			for i in range(1000, 10000):
			    if f(i) == 1128: r += 1
			print(r)

		На вход алгоритма подаётся натуральное четырёхзначное число NN, в котором все цифры различны. Алгоритм строит по нему новое число RR следующим образом:
		1. Максимальная и минимальная цифры числа складываются.
		2. Остальные две цифры перемножаются.
		3. Полученные два числа записываются друг за другом в порядке неубывания (без разделителей).
		Полученное на шаге 3 число и является искомым R.
		Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число R, большее 85. В ответе запишите это число в десятичной системе счисления.		

			def f(n):
			    digits = sorted(map(int, str(n)))
			    res1 = digits[3] + digits[0]
			    res2 = digits[1] * digits[2]
			    if res1 > res2: return int(str(res2) + str(res1))
			    else: return int(str(res1) + str(res2))
			print([N for N in range(1000, 10000) if f(N) > 85])

			Очень важна строка "в котором все цифры различны" - поэтому найдем такое число в большом списке!

		Автомат получает на вход натуральное четырёхзначное число N. По этому числу строится новое число по следующим правилам:
		1. Складываются 1 и 2 цифры числа.
		2. Складываются 3 и 4 цифры числа.
		3. Полученные суммы записываются в порядке неубывания.
		4. Из наибольшей цифры полученного числа вычитается наименьшая, и результат вычитания записывается в конец числа.
		Каково наименьшее N, в результате применения к которому данного алгоритма, получается число 17176?		

			def f(n):
			    digits = list(map(int, str(n)))
			    res1 = digits[0] + digits[1]
			    res2 = digits[2] + digits[3]
			    res = ''
			    if res1 > res2: res = str(res2) + str(res1)
			    else: res = str(res1) + str(res2)
			    x = sorted(map(int, res))
			    y = x[-1] - x[0]
			    res = res + str(y)
			    return int(res)
			print(min([N for N in range(1000, 10000) if f(N) == 17176]))

		У Деда Мороза есть специальная машина для кодирования подарков, которая преобразует четырёхзначные числа по алгоритму:
		1. Вычисляет квадрат суммы чётных цифр
		2. Разность максимальной и минимальной цифры возводит в куб
		3. Полученные два числа записывает друг за другом в порядке неубывания
		Укажите наименьшее число, при обработке которого автомат выдаст число 4343.

			def f(n):
			    digits = sorted(map(int, str(n)))
			    res = []
			    for i in digits:
			        if i % 2 == 0: res.append(i)
			    res1 = sum(res)**2
			    res2 = (digits[-1] - digits[0])**3
			    r = ''
			    if res1 > res2: r = str(res2) + str(res1)
			    else: r = str(res1) + str(res2)
			    return int(r)
			print(min(N for N in range(1000, 10000) if f(N) == 4343))

		Дано натуральное четырёхзначное число N. К нему применяется алгоритм.
		1. Перемножаются первая и вторая, вторая и третья, третья и четвёртая цифры числа.
		2. Полученные произведения записываются друг за другом в порядке неубывания.
		3. Незначащие нули в начале числа отбрасываются.
		Какое максимальное четырёхзначное число можно получить?

			def f(n):
			    digits = list(map(int, str(n)))
			    res1 = digits[0] * digits[1]
			    res2 = digits[1] * digits[2]
			    res3 = digits[2] * digits[3]
			    r = sorted([res1, res2, res3])
			    res = ''
			    for i in r:
			        if i != 0: res += str(i)
			        else: res += '0'
			    return int(res)
			m = []
			for i in range(1000, 10000):
			    m.append(f(i))
			print(sorted(m))

		Автомат получает на вход четырёхзначное число. По этому числу строится новое число по следующим правилам.
		1. Складываются отдельно первая и вторая цифры, вторая и третья цифры, а также третья и четвёртая цифры.
		2. Из полученных трёх чисел выбираются два наибольших и записываются друг за другом в порядке неубывания без разделителей.
		Укажите наименьшее число, при обработке которого автомат выдаёт результат 1418.		

			def f(n):
			    digits = list(map(int, str(n)))
			    res1 = digits[0] + digits[1]
			    res2 = digits[1] + digits[2]
			    res3 = digits[2] + digits[3]
			    res = sorted([res1, res2, res3])
			    resAll = str(res[-2]) + str(res[-1])
			    return int(resAll)
			print(min([N for N in range(1000, 10000) if f(N) == 1418]))

		Автомат получает на вход четырёхзначное десятичное число, в котором все цифры нечётные. По этому числу строится новое число по следующим правилам.
		1. Складываются первая и вторая, а также третья и четвёртая цифры.
		2. Полученные два числа записываются друг за другом в порядке неубывания (без разделителей).
		Сколько существует чисел, в результате обработки которых автомат выдаст число 414.

			def f(n):
			    digits = list(map(int, str(n)))
			    res1 = digits[0] + digits[1]
			    res2 = digits[2] + digits[3]
			    res = sorted([res1, res2])
			    resAll = int(str(res[0]) + str(res[1]))
			    return resAll
			l = 0
			for i in range(1000, 10000):
			    I = list(map(int, str(i)))
			    if I[0] % 2 != 0 and I[1] % 2 != 0 and I[2] % 2 != 0 and I[3] % 2 != 0:
			        if f(i) == 414: l += 1
			print(l)

			Очень важна запись о числе, в котором все цифры нечетные.

Другие системы
	
		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится троичная запись числа N.
		2. Далее эта запись обрабатывается по следующему правилу:
			а) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
		    б) если число N на 3 не делится, то остаток от деления на 3 умножается на 4, переводится в троичную запись и дописывается в конец числа.
		    Полученная таким образом запись является троичной записью искомого числа R.
		3. Результат переводится в десятичную систему и выводится на экран.
		Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R, меньшее 199.		

			def c(n):
			    s = ''
			    while n > 0:
			        s += str(n % 3)
			        n //= 3
			    s = s[::-1]
			    return int(s)
			def f(n):
			    r = ''
			    if n % 3 == 0: r = '1' + str(c(n)) + '02'
			    else: r = str(c(n)) + str(c((n % 3)*4))
			    return int(r, 3)
			print(max([N for N in range(1, 1000) if f(N) < 199]))		

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится запись числа N в системе счисления с основанием 12.
		2. Далее эта запись обрабатывается по следующему правилу:
		а) если число N делится на 4, то слева к нему приписывается «2», а справа «64»;
		б) если число N на 4 не делится, то в конец числа дописывается его максимальная цифра в системе счисления с основанием 12.
		Полученная таким образом запись является двенадцатеричной записью искомого числа R.
		3. Результат переводится в десятичную систему и выводится на экран.
		Укажите минимальное число R, большее 1799, которое может быть получено с помощью описанного алгоритма. В ответе запишите это число в десятичной системе счисления.		

			def c(n):
			    alph = '0123456789AB'
			    res = ''
			    while n > 0:
			        res = str(alph[n % 12]) + res
			        n //= 12
			    if res[0] == '0': res = res[1::]
			    return res
			def f(n):
			    res = c(n)
			    if n % 4 == 0: res = '2' + res + '64'
			    else: 
			        l = sorted(res)
			        res = res + l[-1]
			    return int(res, 12)
			res = []
			for i in range(1, 1000):
			    if f(i) > 1799: res.append(f(i))
			print(min(res))

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится семеричная запись числа N.
		2. Далее эта запись обрабатывается по следующему правилу:
		а) если количество двоек в этой записи чётно, то к ней дописываются 3 пятёрки.
		6) иначе, если количество двоек в этой записи нечётно, то слева к этой записи дописывается 1 единица.
		Полученная таким образом запись является семеричной записью искомого числа R.
		3. Результат переводится в десятичную систему и выводится на экран.
		Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R, меньшее 3799.

			def c(n):
			    res = ''
			    while n > 0:
			        res += str(n % 7)
			        n //= 7
			    res = res[::-1]
			    return res
			def f(n):
			    res = c(n)
			    if (res.count('2')) % 2 == 0: res = res + '555'
			    else: res = '1' + res
			    return int(res, 7)
			print(max([N for N in range(1, 100000) if f(N) < 3799]))

		Автомат обрабатывает натуральное число N по следующему алгоритму.
		1. В шестеричной записи числа N дублируется последняя цифра
		2. Полученное число переводится в двоичную систему счисления.
		3. Искомое R - сумма цифр в конечной версии числа.
		Напишите максимальное число N, не превышающее 105, для которого R = 18.

			def f(n):
			    res = ''
			    while n > 0:
			        res += str(n % 6)
			        n //= 6
			    res = res[::-1]
			    res = int(res + res[-1], 6)
			    res = bin(res)[2:]
			    res = res.count('1')
			    return res
			print(max([N for N in range(1, 100000) if f(N) == 18]))

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится восьмеричная запись числа N.
		2. Далее эта запись обрабатывается по следующему правилу:
		а) если восьмеричная запись начинается на 5, то  все двойки в записи меняются на единицы, а все единицы меняются на  двойки после к числу приписывается 11 слева; б) если восьмеричная запись начинается не на 5, то к записи справа приписывается 10, а первый разряд полученной записи заменяется на 2.
		Полученная таким образом запись является восьмеричной записью искомого числа R. 
		Укажите  максимальное число N, для которого результатом работы алгоритма является наибольшее  число R, меньшее 1354.
		В ответе это число запишите в десятичной системе счисления.

			def f(n):
			    res = oct(n)[2:]
			    if res[0] == '5': 
			        res = res.replace('2', '*')
			        res = res.replace('1', '2')
			        res = res.replace('*', '1')
			        res = '11' + res
			    else: 
			        res = res + '10'
			        res = '2' + res[1:]
			    return int(res, 8)
			print(max([N for N in range(1, 100000) if f(N) < 1354]))

		Алгоритм преобразует входное число N > 150 в число R выполняя следующие действия:
		1. Число N преобразуется в шестнадцатеричную систему счисления;
		2. В полученной записи все цифры А заменяются на 1;
		3. В полученной записи подсчитывается количество четных цифр, если их больше 2-х, то справа дописывается B, иначе слева дописывают F;
		4. Результат переводится в десятичную систему счисления;
		Определите минимальное значение N для которого получается минимально возможное R большее 3500

			def f(n):
			    res = hex(n)[2:]
			    res = res.replace('a', '1')
			    l = 0
			    for i in res:
			        if int(i, 16) % 2 == 0: l += 1
			    if l > 2: res = res + 'b'
			    else: res = 'f' + res
			    return int(res, 16)
			r = []
			for i in range(151, 1000):
			    if f(i) > 3500: r.append([f(i), i])
			print(sorted(r))

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом:
		1. Строится шестнадцатеричная запись числа.
		2. Далее, эта запись обрабатывается по следующему правилу:
		а) Если цифр B в ней чётное количество, то к этой записи слева дописывается 1.
		б) Если цифр B в ней нечётное количество, то к этой записи справа дописывается 1.
		Полученная таким образом запись является шестнадцатеричной записью искомого числа R.
		Определите количество натуральных чисел N, для которых результатом выполнения алгоритма может стать двухзначное число.

			def f(n):
			    res = hex(n)[2:]
			    if res.count('b') % 2 == 0: res = '1' + res
			    else: res = res + '1'
			    return int(res, 16)
			res = []
			for i in range(1, 10000):
			    res.append(f(i))
			print(sorted(res))	

		На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится восьмеричная запись числа N.
		2. Далее эта запись обрабатывается по следующему правилу:
		а) если число N чётное, то к этой записи в восьмеричном виде дописывается её максимальная цифра;
		б) если число N нечётное, то минимальная цифра записи умножается на два и в восьмеричном виде дописывается в конец числа.
		Полученная таким образом запись является восьмеричной записью искомого числа R.
		3. Результат переводится в десятичную систему и выводится на экран.
		Укажите максимальное число N, после обработки которого с помощью этого алгоритма получается число R, меньшее 313.

			def f(n):
			    res = oct(n)[2:]
			    l = sorted(res)
			    if n % 2 == 0: res = res + l[-1]
			    else: res = res + str(oct(int(l[0]) * 2)[2:])
			    return int(res, 8)
			print(max([N for N in range(1, 10000) if f(N) < 313]))

		На вход алгоритма подаётся нечётное натуральное число N. Алгоритм строит по нему новое число R следующим образом.
		1. Строится четверичная запись числа N.
		2. Далее эта запись обрабатывается по следующему правилу:
		а) если число N делится на 3, то первая и последняя цифры меняются местами, а затем в конец дописывается единица;
		б) если число N на 3 не делится, то остаток от деления на 3 дописывается в конец числа.
		Полученная таким образом запись является четверичной записью искомого числа R.
		3. Результат переводится в десятичную систему и выводится на экран.
		Укажите максимальное число R, не превышающее 340, которое может быть получено с помощью описанного алгоритма.
		В ответе запишите это число в десятичной системе счисления.

			def c(n):
			    res = ''
			    while n > 0:
			        res += str(n % 4)
			        n //= 4
			    res = res[::-1]
			    return res
			def f(n):
			    res = c(n)
			    if n % 3 == 0: 
			        res = res[-1] + res[1:-1] + res[0] + '1'
			    else: res = res + str(n % 3)
			    return int(res, 4)
			r = []
			for i in range(1, 10000, 2):
			    if f(i) <= 340: r.append([f(i), i])
			print(sorted(r))		